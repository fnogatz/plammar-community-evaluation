{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/cplint/cplint-master/prolog/examples/iris_c3.pl', [op(600,xfy,'::'),op(1150,fx,action),op(1200,fy,map_query),op(1200,fy,abducible),op(600,xfy,'~'),op(500,xfx,'~='),op(1200,xfy,':='),op(1150,fx,mcaction),op(500,fx,#),op(500,fx,'-#')]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/cplint/cplint-master/prolog/examples/iris_c3.pl", :operators "[op(600,xfy,'::'),op(1150,fx,action),op(1200,fy,map_query),op(1200,fy,abducible),op(600,xfy,'~'),op(500,xfx,'~='),op(1200,xfy,':='),op(1150,fx,mcaction),op(500,fx,#),op(500,fx,'-#')]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/cplint/cplint-master/prolog/examples/dp_chinese.pl', [op(600,xfy,'::'),op(1150,fx,action),op(1200,fy,map_query),op(1200,fy,abducible),op(600,xfy,'~'),op(500,xfx,'~='),op(1200,xfy,':='),op(1150,fx,mcaction),op(500,fx,#),op(500,fx,'-#')]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/cplint/cplint-master/prolog/examples/dp_chinese.pl", :operators "[op(600,xfy,'::'),op(1150,fx,action),op(1200,fy,map_query),op(1200,fy,abducible),op(600,xfy,'~'),op(500,xfx,'~='),op(1200,xfy,':='),op(1150,fx,mcaction),op(500,fx,#),op(500,fx,'-#')]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/pepl/pepl/slp/det/grammar.pl', [op( 600, xfy, :: ),op( 1200, xfy, :: )]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/pepl/pepl/slp/det/grammar.pl", :operators "[op( 600, xfy, :: ),op( 1200, xfy, :: )]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/pepl/pepl/slp/det/animals.pl', [op( 600, xfy, :: ),op( 1200, xfy, :: )]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/pepl/pepl/slp/det/animals.pl", :operators "[op( 600, xfy, :: ),op( 1200, xfy, :: )]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/pepl/pepl/examples/slp/det/animals.pl', [op( 600, xfy, :: ),op( 1200, xfy, :: )]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/pepl/pepl/examples/slp/det/animals.pl", :operators "[op( 600, xfy, :: ),op( 1200, xfy, :: )]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/pepl/pepl/examples/slp/det/grammar.pl', [op( 600, xfy, :: ),op( 1200, xfy, :: )]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/pepl/pepl/examples/slp/det/grammar.pl", :operators "[op( 600, xfy, :: ),op( 1200, xfy, :: )]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/wgraph/wgraph/src/wgraph_adjacency.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/wgraph/wgraph/src/wgraph_adjacency.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/wgraph/wgraph/src/wgraph_plot.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/wgraph/wgraph/src/wgraph_plot.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/pub_graph/pub_graph/examples/2016.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/pub_graph/pub_graph/examples/2016.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/readability_parser/prolog/readability_parser.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/readability_parser/prolog/readability_parser.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/pac/document/pac-query-samples.pl', [op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/pac/document/pac-query-samples.pl", :operators "[op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/pac/document/sample-queries.pl', [op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/pac/document/sample-queries.pl", :operators "[op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/pac/prolog/pac/test.pl', [op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/pac/prolog/pac/test.pl", :operators "[op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/pac/prolog/misc/develop.pl', [op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/pac/prolog/misc/develop.pl", :operators "[op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/pac/prolog/misc/primrecfast.pl', [op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/pac/prolog/misc/primrecfast.pl", :operators "[op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/pac/prolog/misc/matrix.pl', [op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/pac/prolog/misc/matrix.pl", :operators "[op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/pac/prolog/misc/models.pl', [op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/pac/prolog/misc/models.pl", :operators "[op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/pac/prolog/misc/snippets.pl', [op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/pac/prolog/misc/snippets.pl", :operators "[op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/pac/prolog/misc/ifmap-demo.pl', [op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/pac/prolog/misc/ifmap-demo.pl", :operators "[op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/pac/prolog/misc/tex-symbol.pl', [op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/pac/prolog/misc/tex-symbol.pl", :operators "[op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/pac/prolog/misc/convert-dcg.pl', [op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/pac/prolog/misc/convert-dcg.pl", :operators "[op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/pac/prolog/misc/html.pl', [op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/pac/prolog/misc/html.pl", :operators "[op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/pac/prolog/misc/primrec.pl', [op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/pac/prolog/misc/primrec.pl", :operators "[op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/pac/prolog/misc/zdd-heaven-hell.pl', [op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/pac/prolog/misc/zdd-heaven-hell.pl", :operators "[op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/pac/prolog/misc/ptq-fragment.pl', [op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/pac/prolog/misc/ptq-fragment.pl", :operators "[op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/pac/prolog/misc/ml.pl', [op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/pac/prolog/misc/ml.pl", :operators "[op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/pac/prolog/misc/cgi.pl', [op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/pac/prolog/misc/cgi.pl", :operators "[op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/pac/prolog/misc/misc.pl', [op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/pac/prolog/misc/misc.pl", :operators "[op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/pac/prolog/other/pac-kind-sample.pl', [op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/pac/prolog/other/pac-kind-sample.pl", :operators "[op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/pac/prolog/other/prgramming-memo.pl', [op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/pac/prolog/other/prgramming-memo.pl", :operators "[op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/pac/prolog/other/tiny.pl', [op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/pac/prolog/other/tiny.pl", :operators "[op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/pac/prolog/misc/ptq.pl', [op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/pac/prolog/misc/ptq.pl", :operators "[op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/pac/prolog/other/pac-query-sample.pl', [op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/pac/prolog/other/pac-query-sample.pl", :operators "[op(8,  fy, '`'),op(10,  fy, *),op(10,  fy, ?),op(10,  fy, @),op(10,  fy, #),op(10,  fy, :),op(60, yfx, @),op(60, yfx, #),op(650, xfy, (::)),op(700, xfx, in),op(710, fy,  ~),op(710, fx, (!)),op(750, yfx, &),op(1100,fx,sld),op(1200, xfy, :=),op(1100,xfx, <=>),op(1200,xfx,-->>),op(1050, xfy, \\),op(1105, xfy, '|'),op(710,fy,~),op(1200, xfx, -->>),op(20, fx, '`'),op(1060, xfy, ~),op(1060, xfy, <->),op(1060, xfy, <=> ),op(1040, xfy, \\/),op(1030, xfy, /\\),op(1020, fy, \\),op(100, xfy, &),op(1060, xfy, #),op(1050, yfx, <-),op(700, xfx, :=),op(1000, xfy, &),op(10, fy, (!)),op(800, xfy, (<>)),op(100, xfx, (>>)),op(500, yfx, &),op(10, fx, *),op(60, yfx,\tuser:(@)),op(650, xfy,\tuser:(::)),op(750, yfx,\tuser:(&))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/integration/logtalk_comp_xsb.pl', [op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/integration/logtalk_comp_xsb.pl", :operators "[op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/integration/logtalk_xsb.pl', [op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/integration/logtalk_xsb.pl", :operators "[op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/integration/logtalk_quintus.pl', [op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/integration/logtalk_quintus.pl", :operators "[op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/integration/logtalk_comp_xsbmt.pl', [op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/integration/logtalk_comp_xsbmt.pl", :operators "[op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/integration/logtalk_xsbmt.pl', [op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/integration/logtalk_xsbmt.pl", :operators "[op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/examples/attvars/dispatch.pl', [op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/examples/attvars/dispatch.pl", :operators "[op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/examples/xpce/xpce_hooks.pl', [op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/examples/xpce/xpce_hooks.pl", :operators "[op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/adapters/unsupported/minerva.pl', [op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/adapters/unsupported/minerva.pl", :operators "[op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/adapters/unsupported/amzi.pl', [op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/adapters/unsupported/amzi.pl", :operators "[op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/adapters/unsupported/bin.pl', [op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/adapters/unsupported/bin.pl", :operators "[op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/adapters/unsupported/if.pl', [op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/adapters/unsupported/if.pl", :operators "[op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/adapters/eclipse.pl', [op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/adapters/eclipse.pl", :operators "[op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/adapters/unsupported/lpamac.pl', [op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/adapters/unsupported/lpamac.pl", :operators "[op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/adapters/unsupported/lpawin.pl', [op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/adapters/unsupported/lpawin.pl", :operators "[op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/adapters/template.pl', [op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/adapters/template.pl", :operators "[op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/adapters/xsb.pl', [op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/logtalk/logtalk/logtalk-3.24.0/adapters/xsb.pl", :operators "[op(888, xfx, foo),op(600, xfy, ::),op(600,  fy, ::),op(600,  fy, ^^),op(200, fy, (+)),op(200, fy, (?)),op(200, fy, (@)),op(200, fy, (-)),op(200, fy, ++),op(200, fy, --),op(400, yfx, <<),op(400, yfx, >>),op(700, xfx, as),op(200,  fy,  +),op(200,  fy,  ?),op(200,  fy,  @),op(200,  fy,  -),op(600,  fy,  :),op(950, xfy, #),op(850, xfy, &),op(500, fx, +),op(500, fx, -),op(700,xfx,less_than),op(700, xfx, \\=),op(200, xfx, **),op(1200, xfx, [(-->)])]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/\\'graphql-swipl\\'/graphql-master/tests/test_graphql.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/'graphql-swipl'/graphql-master/tests/test_graphql.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/odict/prolog/odict/ptq-fragment.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/odict/prolog/odict/ptq-fragment.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/fine_upload/fine_upload-0.1.5/demo/upload.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/fine_upload/fine_upload-0.1.5/demo/upload.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/djson/t/serialize.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/djson/t/serialize.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/djson/t/parsing.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/djson/t/parsing.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/djson/prolog/djson.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/djson/prolog/djson.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_decimal.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_decimal.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_date.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_date.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/elem_choice_minmax.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/elem_choice_minmax.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/choice_choice_1.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/choice_choice_1.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/elem_sequence_minmax_3.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/elem_sequence_minmax_3.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_double.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_double.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_negativeInteger.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_negativeInteger.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_anySimpleType.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_anySimpleType.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_long.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_long.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_unsignedShort.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_unsignedShort.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_anyAtomicType.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_anyAtomicType.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_list.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_list.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/choice_basic.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/choice_basic.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_float.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_float.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_nmtokens.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_nmtokens.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_nmtoken.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_nmtoken.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/elem_sequence_minmax_2.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/elem_sequence_minmax_2.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_positiveInteger.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_positiveInteger.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/choice_sequence_1.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/choice_sequence_1.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/sequence_basic.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/sequence_basic.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_string.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_string.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/kundenliste.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/kundenliste.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/example_3.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/example_3.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/schema.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/schema.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/example_2.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/example_2.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_boolean.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_boolean.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/complexType_global.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/complexType_global.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/sequence_sequence_1.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/sequence_sequence_1.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/choice_sequence_2.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/choice_sequence_2.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_nonPositiveInteger.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_nonPositiveInteger.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_short.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_short.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/attribute_3.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/attribute_3.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/all_minmax.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/all_minmax.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_union.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_union.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/elem_sequence_minmax_1.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/elem_sequence_minmax_1.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/annotation.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/annotation.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_time.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_time.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_unsignedByte.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_unsignedByte.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/sequence_choice_1.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/sequence_choice_1.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/universitaet.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/universitaet.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_unsignedLong.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_unsignedLong.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_unsignedInt.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_unsignedInt.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/elem_ref.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/elem_ref.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/example.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/example.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/attribute_1.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/attribute_1.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/sequence_choice_all_empty.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/sequence_choice_all_empty.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/choice_minmax.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/choice_minmax.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_int.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_int.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/sequence_minmax.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/sequence_minmax.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_restriction.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_restriction.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/attribute_2.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/attribute_2.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/attribute_4.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/attribute_4.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/all_basic.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/all_basic.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/complexType_nested.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/complexType_nested.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_datetime.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_datetime.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_byte.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_byte.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_integer.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_integer.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_nonNegativeInteger.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xsd/xsd-0.1.6/test/validation/simpleType_nonNegativeInteger.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/chat80/chat80-1.0/prolog/chat80/readin.pl', [op(900,xfx,~=),op(900,xfx,=+),op(900,xfx,=:),op(450,xfy,:),op(400,xfy,&),op(300,fx,~),op(200,xfx,--),op(359,xf,ject),op(1150, fx, [(mode), (public)]),op(500,xfy,--)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/chat80/chat80-1.0/prolog/chat80/readin.pl", :operators "[op(900,xfx,~=),op(900,xfx,=+),op(900,xfx,=:),op(450,xfy,:),op(400,xfy,&),op(300,fx,~),op(200,xfx,--),op(359,xf,ject),op(1150, fx, [(mode), (public)]),op(500,xfy,--)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/semantria/prolog/semantria.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/semantria/prolog/semantria.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/rtchecks/rtchecks-master/prolog/rtcprops.pl', [op(1150, fx, rtchecked)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/rtchecks/rtchecks-master/prolog/rtcprops.pl", :operators "[op(1150, fx, rtchecked)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/rtchecks/rtchecks-master/examples/rtc_external.pl', [op(1150, fx, rtchecked)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/rtchecks/rtchecks-master/examples/rtc_external.pl", :operators "[op(1150, fx, rtchecked)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/rtchecks/rtchecks-master/examples/rtchecks_example2.pl', [op(1150, fx, rtchecked)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/rtchecks/rtchecks-master/examples/rtchecks_example2.pl", :operators "[op(1150, fx, rtchecked)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/rtchecks/rtchecks-master/examples/rtchecks_example.pl', [op(1150, fx, rtchecked)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/rtchecks/rtchecks-master/examples/rtchecks_example.pl", :operators "[op(1150, fx, rtchecked)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/phil_datasets/phil_datasets-1.0/prolog/mutadeep.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/phil_datasets/phil_datasets-1.0/prolog/mutadeep.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/sldnfdraw/sldnfdraw-master/prolog/examples/member.pl', [op(900,fy,not)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/sldnfdraw/sldnfdraw-master/prolog/examples/member.pl", :operators "[op(900,fy,not)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xlisting_web/xlisting_web-master/prolog/logicmoo_run_pldoc.pl', [op(1150, fx, (rdf_meta)),op(1199,fx,('==>')),op(1190,xfx,('::::')),op(1180,xfx,('==>')),op(1170,xfx,'<==>'),op(1160,xfx,('<-')),op(1150,xfx,'=>'),op(1140,xfx,'<='),op(1130,xfx,'<=>'),op(600,yfx,'&'),op(600,yfx,'v'),op(350,xfx,'xor'),op(300,fx,'~'),op(300,fx,'-')]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xlisting_web/xlisting_web-master/prolog/logicmoo_run_pldoc.pl", :operators "[op(1150, fx, (rdf_meta)),op(1199,fx,('==>')),op(1190,xfx,('::::')),op(1180,xfx,('==>')),op(1170,xfx,'<==>'),op(1160,xfx,('<-')),op(1150,xfx,'=>'),op(1140,xfx,'<='),op(1130,xfx,'<=>'),op(600,yfx,'&'),op(600,yfx,'v'),op(350,xfx,'xor'),op(300,fx,'~'),op(300,fx,'-')]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xlisting_web/xlisting_web-master/prolog/logicmoo_run_swish.pl', [op(1150, fx, (rdf_meta)),op(1199,fx,('==>')),op(1190,xfx,('::::')),op(1180,xfx,('==>')),op(1170,xfx,'<==>'),op(1160,xfx,('<-')),op(1150,xfx,'=>'),op(1140,xfx,'<='),op(1130,xfx,'<=>'),op(600,yfx,'&'),op(600,yfx,'v'),op(350,xfx,'xor'),op(300,fx,'~'),op(300,fx,'-')]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xlisting_web/xlisting_web-master/prolog/logicmoo_run_swish.pl", :operators "[op(1150, fx, (rdf_meta)),op(1199,fx,('==>')),op(1190,xfx,('::::')),op(1180,xfx,('==>')),op(1170,xfx,'<==>'),op(1160,xfx,('<-')),op(1150,xfx,'=>'),op(1140,xfx,'<='),op(1130,xfx,'<=>'),op(600,yfx,'&'),op(600,yfx,'v'),op(350,xfx,'xor'),op(300,fx,'~'),op(300,fx,'-')]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xlisting_web/xlisting_web-master/prolog/logicmoo_run_clio.pl', [op(1150, fx, (rdf_meta)),op(1199,fx,('==>')),op(1190,xfx,('::::')),op(1180,xfx,('==>')),op(1170,xfx,'<==>'),op(1160,xfx,('<-')),op(1150,xfx,'=>'),op(1140,xfx,'<='),op(1130,xfx,'<=>'),op(600,yfx,'&'),op(600,yfx,'v'),op(350,xfx,'xor'),op(300,fx,'~'),op(300,fx,'-')]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xlisting_web/xlisting_web-master/prolog/logicmoo_run_clio.pl", :operators "[op(1150, fx, (rdf_meta)),op(1199,fx,('==>')),op(1190,xfx,('::::')),op(1180,xfx,('==>')),op(1170,xfx,'<==>'),op(1160,xfx,('<-')),op(1150,xfx,'=>'),op(1140,xfx,'<='),op(1130,xfx,'<=>'),op(600,yfx,'&'),op(600,yfx,'v'),op(350,xfx,'xor'),op(300,fx,'~'),op(300,fx,'-')]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xlisting_web/xlisting_web-master/prolog/mpred_pldoc_util.pl', [op(1150, fx, (rdf_meta)),op(1199,fx,('==>')),op(1190,xfx,('::::')),op(1180,xfx,('==>')),op(1170,xfx,'<==>'),op(1160,xfx,('<-')),op(1150,xfx,'=>'),op(1140,xfx,'<='),op(1130,xfx,'<=>'),op(600,yfx,'&'),op(600,yfx,'v'),op(350,xfx,'xor'),op(300,fx,'~'),op(300,fx,'-')]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xlisting_web/xlisting_web-master/prolog/mpred_pldoc_util.pl", :operators "[op(1150, fx, (rdf_meta)),op(1199,fx,('==>')),op(1190,xfx,('::::')),op(1180,xfx,('==>')),op(1170,xfx,'<==>'),op(1160,xfx,('<-')),op(1150,xfx,'=>'),op(1140,xfx,'<='),op(1130,xfx,'<=>'),op(600,yfx,'&'),op(600,yfx,'v'),op(350,xfx,'xor'),op(300,fx,'~'),op(300,fx,'-')]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/ccprism/ccprism-master/examples/test2.pl', [op(600,yfx,:>),op(1200,xfx,+->),op(1150,fx,cctable),op(500,xfy,>>),op(1150,xfx,:->),op(600,xfy,>>),op(600,xfy,::),op(700,xfy,:-:),op(200,fx,^),op(900,yfx,$$)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/ccprism/ccprism-master/examples/test2.pl", :operators "[op(600,yfx,:>),op(1200,xfx,+->),op(1150,fx,cctable),op(500,xfy,>>),op(1150,xfx,:->),op(600,xfy,>>),op(600,xfy,::),op(700,xfy,:-:),op(200,fx,^),op(900,yfx,$$)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/amazon_api/prolog/amazon_api.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/amazon_api/prolog/amazon_api.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/bims/bims/auxil/post/parameter_metrics_plots.pl', [op( 550, yfx, :: ),op( 550, yfx, ## ),op( 1100, xfy, ^ )]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/bims/bims/auxil/post/parameter_metrics_plots.pl", :operators "[op( 550, yfx, :: ),op( 550, yfx, ## ),op( 1100, xfy, ^ )]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/uri_qq/t/examples.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/uri_qq/t/examples.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/uri_qq/t/synopsis.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/uri_qq/t/synopsis.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xlibrary/xlibrary-master/prolog/codes_html.pl', [op(1150, fx, table),op(600, xfy, :~~),op(1150, fx, resourceterm),op(700, xfx, =~),op(700, xfx, ~=),op(700, xfx, =~~),op(200, fy, ~),op(200, fy, ~~)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xlibrary/xlibrary-master/prolog/codes_html.pl", :operators "[op(1150, fx, table),op(600, xfy, :~~),op(1150, fx, resourceterm),op(700, xfx, =~),op(700, xfx, ~=),op(700, xfx, =~~),op(200, fy, ~),op(200, fy, ~~)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xlibrary/xlibrary-master/prolog/language_iso.pl', [op(1150, fx, table),op(600, xfy, :~~),op(1150, fx, resourceterm),op(700, xfx, =~),op(700, xfx, ~=),op(700, xfx, =~~),op(200, fy, ~),op(200, fy, ~~)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xlibrary/xlibrary-master/prolog/language_iso.pl", :operators "[op(1150, fx, table),op(600, xfy, :~~),op(1150, fx, resourceterm),op(700, xfx, =~),op(700, xfx, ~=),op(700, xfx, =~~),op(200, fy, ~),op(200, fy, ~~)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/resp_parse/resp-master/prolog/resp.plt', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/resp_parse/resp-master/prolog/resp.plt", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/ffimatrix/ffimatrix-master/prolog/ffimatrix.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/ffimatrix/ffimatrix-master/prolog/ffimatrix.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/cplint_r/cplint_r-master/prolog/cplint_r.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/cplint_r/cplint_r-master/prolog/cplint_r.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/weblog/weblog-master/demo/clippy_demo.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/weblog/weblog-master/demo/clippy_demo.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/weblog/weblog-master/prolog/widgets/agents/clippy.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/weblog/weblog-master/prolog/widgets/agents/clippy.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/weblog/weblog-master/prolog/html_form/ajaxify.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/weblog/weblog-master/prolog/html_form/ajaxify.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/weblog/weblog-master/prolog/html_form/autocomplete.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/weblog/weblog-master/prolog/html_form/autocomplete.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/weblog/weblog-master/prolog/nav/menu.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/weblog/weblog-master/prolog/nav/menu.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/graphql/graphql-master/tests/test_graphql.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/graphql/graphql-master/tests/test_graphql.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xtools/xtools-master/tests/p2.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xtools/xtools-master/tests/p2.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/xtools/xtools-master/tests/p3.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/xtools/xtools-master/tests/p3.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/b_real/b_real/src/r_mtx.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/b_real/b_real/src/r_mtx.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/b_real/b_real/src/r_hist.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/b_real/b_real/src/r_hist.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/b_real/b_real/src/aheatmap.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/b_real/b_real/src/aheatmap.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/b_real/b_real/src/mtx_pheatmap.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/b_real/b_real/src/mtx_pheatmap.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/b_real/b_real/src/lm_plot.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/b_real/b_real/src/lm_plot.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/b_real/b_real/src/pl_vector.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/b_real/b_real/src/pl_vector.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/b_real/b_real/src/r_data_frame.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/b_real/b_real/src/r_data_frame.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/b_real/b_real/src/vector_scale.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/b_real/b_real/src/vector_scale.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/b_real/b_real/src/auxil/palette_n_colours.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/b_real/b_real/src/auxil/palette_n_colours.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/b_real/b_real/src/auxil/heatmap_breaks.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/b_real/b_real/src/auxil/heatmap_breaks.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/b_real/b_real/src/r_unique.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/b_real/b_real/src/r_unique.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/b_real/b_real/src/mtx_df.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/b_real/b_real/src/mtx_df.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/b_real/b_real/src/gg_bar_plot.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/b_real/b_real/src/gg_bar_plot.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/b_real/b_real/src/pl_plot_on.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/b_real/b_real/src/pl_plot_on.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/b_real/b_real/src/columns_fisher_test.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/b_real/b_real/src/columns_fisher_test.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/b_real/b_real/src/mtx_column_pheatmap.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/b_real/b_real/src/mtx_column_pheatmap.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/pljulia/pljulia-master/examples/example.pl', [op(900,fx,?),op(900,fx,!),op(900,xfy,<?),op(900,xfy,??),op(900,yfx,?>),op(200,xfx,::),op(150,fx,:),op(160,yf,'`'),op(800,xfy,:>:),op(400,xfy,\\),op(100,yfx,'`'),op(750,xfy,\\\\),op(200,yf,[]),op(200,yfx,@),op(700,xfy,=>)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/pljulia/pljulia-master/examples/example.pl", :operators "[op(900,fx,?),op(900,fx,!),op(900,xfy,<?),op(900,xfy,??),op(900,yfx,?>),op(200,xfx,::),op(150,fx,:),op(160,yf,'`'),op(800,xfy,:>:),op(400,xfy,\\),op(100,yfx,'`'),op(750,xfy,\\\\),op(200,yf,[]),op(200,yfx,@),op(700,xfy,=>)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/pljulia/pljulia-master/prolog/dcg/julia.pl', [op(900,fx,?),op(900,fx,!),op(900,xfy,<?),op(900,xfy,??),op(900,yfx,?>),op(200,xfx,::),op(150,fx,:),op(160,yf,'`'),op(800,xfy,:>:),op(400,xfy,\\),op(100,yfx,'`'),op(750,xfy,\\\\),op(200,yf,[]),op(200,yfx,@),op(700,xfy,=>)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/pljulia/pljulia-master/prolog/dcg/julia.pl", :operators "[op(900,fx,?),op(900,fx,!),op(900,xfy,<?),op(900,xfy,??),op(900,yfx,?>),op(200,xfx,::),op(150,fx,:),op(160,yf,'`'),op(800,xfy,:>:),op(400,xfy,\\),op(100,yfx,'`'),op(750,xfy,\\\\),op(200,yf,[]),op(200,yfx,@),op(700,xfy,=>)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/bio_db/bio_db/auxil/lib/r_terms_sqlite.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/bio_db/bio_db/auxil/lib/r_terms_sqlite.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/bio_db/bio_db/auxil/lib/csv_ids_map.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/bio_db/bio_db/auxil/lib/csv_ids_map.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/bio_db/bio_db/auxil/build_repo/mouse/lib/r_terms_sqlite.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/bio_db/bio_db/auxil/build_repo/mouse/lib/r_terms_sqlite.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/bio_db/bio_db/auxil/build_repo/mouse/lib/csv_ids_map.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/bio_db/bio_db/auxil/build_repo/mouse/lib/csv_ids_map.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/bio_db/bio_db/auxil/build_repo/mouse/src/map_mouse_uniprot.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/bio_db/bio_db/auxil/build_repo/mouse/src/map_mouse_uniprot.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/bio_db/bio_db/auxil/build_repo/hs/src/map_uniprot.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/bio_db/bio_db/auxil/build_repo/hs/src/map_uniprot.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/bio_db/bio_db/auxil/build_repo/hs/std_maps_gont.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/bio_db/bio_db/auxil/build_repo/hs/std_maps_gont.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/bio_db/bio_db/auxil/build_repo/hs/std_maps_pros.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/bio_db/bio_db/auxil/build_repo/hs/std_maps_pros.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/bio_db/bio_db/examples/lib_preds.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/bio_db/bio_db/examples/lib_preds.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/bio_db/bio_db/examples/cpu/src/gg_draw.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/bio_db/bio_db/examples/cpu/src/gg_draw.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/flux/flux-master/prolog/FluxVersion/Nonground/wumpus.pl', [op(1150,fx,(export)),op(700, xfx, '::'),op(750, fy, '#\\\\+' ),op(700, xfx, '##'),op(700, xfx, '#=' ),op(760, yfx, '#/\\\\' ),op(770, yfx, '#\\\\/' ),op(780, yfx, '#=>' ),op(790, yfx, '#<=>' ),op(800, xfx, isd),op(400, yfx, ('*`')),op(750, fy, local),op(1190,xfy,(do)),op(400,yfx,'#'),op(750, fy, #\\+),op(700, xfx, ##),op(760, yfx, #/\\),op(770, yfx, #\\/),op(780, yfx, #=>),op(790, yfx, #<=>),op(950, xfy, ('#')),op(950, xfy, #)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/flux/flux-master/prolog/FluxVersion/Nonground/wumpus.pl", :operators "[op(1150,fx,(export)),op(700, xfx, '::'),op(750, fy, '#\\\\+' ),op(700, xfx, '##'),op(700, xfx, '#=' ),op(760, yfx, '#/\\\\' ),op(770, yfx, '#\\\\/' ),op(780, yfx, '#=>' ),op(790, yfx, '#<=>' ),op(800, xfx, isd),op(400, yfx, ('*`')),op(750, fy, local),op(1190,xfy,(do)),op(400,yfx,'#'),op(750, fy, #\\+),op(700, xfx, ##),op(760, yfx, #/\\),op(770, yfx, #\\/),op(780, yfx, #=>),op(790, yfx, #<=>),op(950, xfy, ('#')),op(950, xfy, #)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/flux/flux-master/prolog/wumpus_world_small.pl', [op(1150,fx,(export)),op(700, xfx, '::'),op(750, fy, '#\\\\+' ),op(700, xfx, '##'),op(700, xfx, '#=' ),op(760, yfx, '#/\\\\' ),op(770, yfx, '#\\\\/' ),op(780, yfx, '#=>' ),op(790, yfx, '#<=>' ),op(800, xfx, isd),op(400, yfx, ('*`')),op(750, fy, local),op(1190,xfy,(do)),op(400,yfx,'#'),op(750, fy, #\\+),op(700, xfx, ##),op(760, yfx, #/\\),op(770, yfx, #\\/),op(780, yfx, #=>),op(790, yfx, #<=>),op(950, xfy, ('#')),op(950, xfy, #)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/flux/flux-master/prolog/wumpus_world_small.pl", :operators "[op(1150,fx,(export)),op(700, xfx, '::'),op(750, fy, '#\\\\+' ),op(700, xfx, '##'),op(700, xfx, '#=' ),op(760, yfx, '#/\\\\' ),op(770, yfx, '#\\\\/' ),op(780, yfx, '#=>' ),op(790, yfx, '#<=>' ),op(800, xfx, isd),op(400, yfx, ('*`')),op(750, fy, local),op(1190,xfy,(do)),op(400,yfx,'#'),op(750, fy, #\\+),op(700, xfx, ##),op(760, yfx, #/\\),op(770, yfx, #\\/),op(780, yfx, #=>),op(790, yfx, #<=>),op(950, xfy, ('#')),op(950, xfy, #)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/flux/flux-master/prolog/swi_fd.pl', [op(1150,fx,(export)),op(700, xfx, '::'),op(750, fy, '#\\\\+' ),op(700, xfx, '##'),op(700, xfx, '#=' ),op(760, yfx, '#/\\\\' ),op(770, yfx, '#\\\\/' ),op(780, yfx, '#=>' ),op(790, yfx, '#<=>' ),op(800, xfx, isd),op(400, yfx, ('*`')),op(750, fy, local),op(1190,xfy,(do)),op(400,yfx,'#'),op(750, fy, #\\+),op(700, xfx, ##),op(760, yfx, #/\\),op(770, yfx, #\\/),op(780, yfx, #=>),op(790, yfx, #<=>),op(950, xfy, ('#')),op(950, xfy, #)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/flux/flux-master/prolog/swi_fd.pl", :operators "[op(1150,fx,(export)),op(700, xfx, '::'),op(750, fy, '#\\\\+' ),op(700, xfx, '##'),op(700, xfx, '#=' ),op(760, yfx, '#/\\\\' ),op(770, yfx, '#\\\\/' ),op(780, yfx, '#=>' ),op(790, yfx, '#<=>' ),op(800, xfx, isd),op(400, yfx, ('*`')),op(750, fy, local),op(1190,xfy,(do)),op(400,yfx,'#'),op(750, fy, #\\+),op(700, xfx, ##),op(760, yfx, #/\\),op(770, yfx, #\\/),op(780, yfx, #=>),op(790, yfx, #<=>),op(950, xfy, ('#')),op(950, xfy, #)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/flux/flux-master/prolog/FluxVersion/Nonground/fluent.pl', [op(1150,fx,(export)),op(700, xfx, '::'),op(750, fy, '#\\\\+' ),op(700, xfx, '##'),op(700, xfx, '#=' ),op(760, yfx, '#/\\\\' ),op(770, yfx, '#\\\\/' ),op(780, yfx, '#=>' ),op(790, yfx, '#<=>' ),op(800, xfx, isd),op(400, yfx, ('*`')),op(750, fy, local),op(1190,xfy,(do)),op(400,yfx,'#'),op(750, fy, #\\+),op(700, xfx, ##),op(760, yfx, #/\\),op(770, yfx, #\\/),op(780, yfx, #=>),op(790, yfx, #<=>),op(950, xfy, ('#')),op(950, xfy, #)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/flux/flux-master/prolog/FluxVersion/Nonground/fluent.pl", :operators "[op(1150,fx,(export)),op(700, xfx, '::'),op(750, fy, '#\\\\+' ),op(700, xfx, '##'),op(700, xfx, '#=' ),op(760, yfx, '#/\\\\' ),op(770, yfx, '#\\\\/' ),op(780, yfx, '#=>' ),op(790, yfx, '#<=>' ),op(800, xfx, isd),op(400, yfx, ('*`')),op(750, fy, local),op(1190,xfy,(do)),op(400,yfx,'#'),op(750, fy, #\\+),op(700, xfx, ##),op(760, yfx, #/\\),op(770, yfx, #\\/),op(780, yfx, #=>),op(790, yfx, #<=>),op(950, xfy, ('#')),op(950, xfy, #)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/flux/flux-master/prolog/FluxVersion/Ground/fluent.pl', [op(1150,fx,(export)),op(700, xfx, '::'),op(750, fy, '#\\\\+' ),op(700, xfx, '##'),op(700, xfx, '#=' ),op(760, yfx, '#/\\\\' ),op(770, yfx, '#\\\\/' ),op(780, yfx, '#=>' ),op(790, yfx, '#<=>' ),op(800, xfx, isd),op(400, yfx, ('*`')),op(750, fy, local),op(1190,xfy,(do)),op(400,yfx,'#'),op(750, fy, #\\+),op(700, xfx, ##),op(760, yfx, #/\\),op(770, yfx, #\\/),op(780, yfx, #=>),op(790, yfx, #<=>),op(950, xfy, ('#')),op(950, xfy, #)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/flux/flux-master/prolog/FluxVersion/Ground/fluent.pl", :operators "[op(1150,fx,(export)),op(700, xfx, '::'),op(750, fy, '#\\\\+' ),op(700, xfx, '##'),op(700, xfx, '#=' ),op(760, yfx, '#/\\\\' ),op(770, yfx, '#\\\\/' ),op(780, yfx, '#=>' ),op(790, yfx, '#<=>' ),op(800, xfx, isd),op(400, yfx, ('*`')),op(750, fy, local),op(1190,xfy,(do)),op(400,yfx,'#'),op(750, fy, #\\+),op(700, xfx, ##),op(760, yfx, #/\\),op(770, yfx, #\\/),op(780, yfx, #=>),op(790, yfx, #<=>),op(950, xfy, ('#')),op(950, xfy, #)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/flux/flux-master/prolog/wumpus_world_big.pl', [op(1150,fx,(export)),op(700, xfx, '::'),op(750, fy, '#\\\\+' ),op(700, xfx, '##'),op(700, xfx, '#=' ),op(760, yfx, '#/\\\\' ),op(770, yfx, '#\\\\/' ),op(780, yfx, '#=>' ),op(790, yfx, '#<=>' ),op(800, xfx, isd),op(400, yfx, ('*`')),op(750, fy, local),op(1190,xfy,(do)),op(400,yfx,'#'),op(750, fy, #\\+),op(700, xfx, ##),op(760, yfx, #/\\),op(770, yfx, #\\/),op(780, yfx, #=>),op(790, yfx, #<=>),op(950, xfy, ('#')),op(950, xfy, #)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/flux/flux-master/prolog/wumpus_world_big.pl", :operators "[op(1150,fx,(export)),op(700, xfx, '::'),op(750, fy, '#\\\\+' ),op(700, xfx, '##'),op(700, xfx, '#=' ),op(760, yfx, '#/\\\\' ),op(770, yfx, '#\\\\/' ),op(780, yfx, '#=>' ),op(790, yfx, '#<=>' ),op(800, xfx, isd),op(400, yfx, ('*`')),op(750, fy, local),op(1190,xfy,(do)),op(400,yfx,'#'),op(750, fy, #\\+),op(700, xfx, ##),op(760, yfx, #/\\),op(770, yfx, #\\/),op(780, yfx, #=>),op(790, yfx, #<=>),op(950, xfy, ('#')),op(950, xfy, #)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/flux/flux-master/prolog/indigolog/Doc/source/psfrag.pro', [op(1150,fx,(export)),op(700, xfx, '::'),op(750, fy, '#\\\\+' ),op(700, xfx, '##'),op(700, xfx, '#=' ),op(760, yfx, '#/\\\\' ),op(770, yfx, '#\\\\/' ),op(780, yfx, '#=>' ),op(790, yfx, '#<=>' ),op(800, xfx, isd),op(400, yfx, ('*`')),op(750, fy, local),op(1190,xfy,(do)),op(400,yfx,'#'),op(750, fy, #\\+),op(700, xfx, ##),op(760, yfx, #/\\),op(770, yfx, #\\/),op(780, yfx, #=>),op(790, yfx, #<=>),op(950, xfy, ('#')),op(950, xfy, #)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/flux/flux-master/prolog/indigolog/Doc/source/psfrag.pro", :operators "[op(1150,fx,(export)),op(700, xfx, '::'),op(750, fy, '#\\\\+' ),op(700, xfx, '##'),op(700, xfx, '#=' ),op(760, yfx, '#/\\\\' ),op(770, yfx, '#\\\\/' ),op(780, yfx, '#=>' ),op(790, yfx, '#<=>' ),op(800, xfx, isd),op(400, yfx, ('*`')),op(750, fy, local),op(1190,xfy,(do)),op(400,yfx,'#'),op(750, fy, #\\+),op(700, xfx, ##),op(760, yfx, #/\\),op(770, yfx, #\\/),op(780, yfx, #=>),op(790, yfx, #<=>),op(950, xfy, ('#')),op(950, xfy, #)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/flux/flux-master/prolog/indigolog/wumpus_2_3.pl', [op(1150,fx,(export)),op(700, xfx, '::'),op(750, fy, '#\\\\+' ),op(700, xfx, '##'),op(700, xfx, '#=' ),op(760, yfx, '#/\\\\' ),op(770, yfx, '#\\\\/' ),op(780, yfx, '#=>' ),op(790, yfx, '#<=>' ),op(800, xfx, isd),op(400, yfx, ('*`')),op(750, fy, local),op(1190,xfy,(do)),op(400,yfx,'#'),op(750, fy, #\\+),op(700, xfx, ##),op(760, yfx, #/\\),op(770, yfx, #\\/),op(780, yfx, #=>),op(790, yfx, #<=>),op(950, xfy, ('#')),op(950, xfy, #)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/flux/flux-master/prolog/indigolog/wumpus_2_3.pl", :operators "[op(1150,fx,(export)),op(700, xfx, '::'),op(750, fy, '#\\\\+' ),op(700, xfx, '##'),op(700, xfx, '#=' ),op(760, yfx, '#/\\\\' ),op(770, yfx, '#\\\\/' ),op(780, yfx, '#=>' ),op(790, yfx, '#<=>' ),op(800, xfx, isd),op(400, yfx, ('*`')),op(750, fy, local),op(1190,xfy,(do)),op(400,yfx,'#'),op(750, fy, #\\+),op(700, xfx, ##),op(760, yfx, #/\\),op(770, yfx, #\\/),op(780, yfx, #=>),op(790, yfx, #<=>),op(950, xfy, ('#')),op(950, xfy, #)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/flux/flux-master/prolog/indigolog/Interpreters/flux/swi_fd.pl', [op(1150,fx,(export)),op(700, xfx, '::'),op(750, fy, '#\\\\+' ),op(700, xfx, '##'),op(700, xfx, '#=' ),op(760, yfx, '#/\\\\' ),op(770, yfx, '#\\\\/' ),op(780, yfx, '#=>' ),op(790, yfx, '#<=>' ),op(800, xfx, isd),op(400, yfx, ('*`')),op(750, fy, local),op(1190,xfy,(do)),op(400,yfx,'#'),op(750, fy, #\\+),op(700, xfx, ##),op(760, yfx, #/\\),op(770, yfx, #\\/),op(780, yfx, #=>),op(790, yfx, #<=>),op(950, xfy, ('#')),op(950, xfy, #)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/flux/flux-master/prolog/indigolog/Interpreters/flux/swi_fd.pl", :operators "[op(1150,fx,(export)),op(700, xfx, '::'),op(750, fy, '#\\\\+' ),op(700, xfx, '##'),op(700, xfx, '#=' ),op(760, yfx, '#/\\\\' ),op(770, yfx, '#\\\\/' ),op(780, yfx, '#=>' ),op(790, yfx, '#<=>' ),op(800, xfx, isd),op(400, yfx, ('*`')),op(750, fy, local),op(1190,xfy,(do)),op(400,yfx,'#'),op(750, fy, #\\+),op(700, xfx, ##),op(760, yfx, #/\\),op(770, yfx, #\\/),op(780, yfx, #=>),op(790, yfx, #<=>),op(950, xfy, ('#')),op(950, xfy, #)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/flux/flux-master/prolog/indigolog/Interpreters/flux/fluent2.pl', [op(1150,fx,(export)),op(700, xfx, '::'),op(750, fy, '#\\\\+' ),op(700, xfx, '##'),op(700, xfx, '#=' ),op(760, yfx, '#/\\\\' ),op(770, yfx, '#\\\\/' ),op(780, yfx, '#=>' ),op(790, yfx, '#<=>' ),op(800, xfx, isd),op(400, yfx, ('*`')),op(750, fy, local),op(1190,xfy,(do)),op(400,yfx,'#'),op(750, fy, #\\+),op(700, xfx, ##),op(760, yfx, #/\\),op(770, yfx, #\\/),op(780, yfx, #=>),op(790, yfx, #<=>),op(950, xfy, ('#')),op(950, xfy, #)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/flux/flux-master/prolog/indigolog/Interpreters/flux/fluent2.pl", :operators "[op(1150,fx,(export)),op(700, xfx, '::'),op(750, fy, '#\\\\+' ),op(700, xfx, '##'),op(700, xfx, '#=' ),op(760, yfx, '#/\\\\' ),op(770, yfx, '#\\\\/' ),op(780, yfx, '#=>' ),op(790, yfx, '#<=>' ),op(800, xfx, isd),op(400, yfx, ('*`')),op(750, fy, local),op(1190,xfy,(do)),op(400,yfx,'#'),op(750, fy, #\\+),op(700, xfx, ##),op(760, yfx, #/\\),op(770, yfx, #\\/),op(780, yfx, #=>),op(790, yfx, #<=>),op(950, xfy, ('#')),op(950, xfy, #)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/flux/flux-master/prolog/indigolog/Interpreters/flux/fluent_ecl.pl', [op(1150,fx,(export)),op(700, xfx, '::'),op(750, fy, '#\\\\+' ),op(700, xfx, '##'),op(700, xfx, '#=' ),op(760, yfx, '#/\\\\' ),op(770, yfx, '#\\\\/' ),op(780, yfx, '#=>' ),op(790, yfx, '#<=>' ),op(800, xfx, isd),op(400, yfx, ('*`')),op(750, fy, local),op(1190,xfy,(do)),op(400,yfx,'#'),op(750, fy, #\\+),op(700, xfx, ##),op(760, yfx, #/\\),op(770, yfx, #\\/),op(780, yfx, #=>),op(790, yfx, #<=>),op(950, xfy, ('#')),op(950, xfy, #)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/flux/flux-master/prolog/indigolog/Interpreters/flux/fluent_ecl.pl", :operators "[op(1150,fx,(export)),op(700, xfx, '::'),op(750, fy, '#\\\\+' ),op(700, xfx, '##'),op(700, xfx, '#=' ),op(760, yfx, '#/\\\\' ),op(770, yfx, '#\\\\/' ),op(780, yfx, '#=>' ),op(790, yfx, '#<=>' ),op(800, xfx, isd),op(400, yfx, ('*`')),op(750, fy, local),op(1190,xfy,(do)),op(400,yfx,'#'),op(750, fy, #\\+),op(700, xfx, ##),op(760, yfx, #/\\),op(770, yfx, #\\/),op(780, yfx, #=>),op(790, yfx, #<=>),op(950, xfy, ('#')),op(950, xfy, #)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/flux/flux-master/prolog/indigolog/Interpreters/flux/fluent_swi.pl', [op(1150,fx,(export)),op(700, xfx, '::'),op(750, fy, '#\\\\+' ),op(700, xfx, '##'),op(700, xfx, '#=' ),op(760, yfx, '#/\\\\' ),op(770, yfx, '#\\\\/' ),op(780, yfx, '#=>' ),op(790, yfx, '#<=>' ),op(800, xfx, isd),op(400, yfx, ('*`')),op(750, fy, local),op(1190,xfy,(do)),op(400,yfx,'#'),op(750, fy, #\\+),op(700, xfx, ##),op(760, yfx, #/\\),op(770, yfx, #\\/),op(780, yfx, #=>),op(790, yfx, #<=>),op(950, xfy, ('#')),op(950, xfy, #)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/flux/flux-master/prolog/indigolog/Interpreters/flux/fluent_swi.pl", :operators "[op(1150,fx,(export)),op(700, xfx, '::'),op(750, fy, '#\\\\+' ),op(700, xfx, '##'),op(700, xfx, '#=' ),op(760, yfx, '#/\\\\' ),op(770, yfx, '#\\\\/' ),op(780, yfx, '#=>' ),op(790, yfx, '#<=>' ),op(800, xfx, isd),op(400, yfx, ('*`')),op(750, fy, local),op(1190,xfy,(do)),op(400,yfx,'#'),op(750, fy, #\\+),op(700, xfx, ##),op(760, yfx, #/\\),op(770, yfx, #\\/),op(780, yfx, #=>),op(790, yfx, #<=>),op(950, xfy, ('#')),op(950, xfy, #)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/flux/flux-master/prolog/wumpus_2_3.pl', [op(1150,fx,(export)),op(700, xfx, '::'),op(750, fy, '#\\\\+' ),op(700, xfx, '##'),op(700, xfx, '#=' ),op(760, yfx, '#/\\\\' ),op(770, yfx, '#\\\\/' ),op(780, yfx, '#=>' ),op(790, yfx, '#<=>' ),op(800, xfx, isd),op(400, yfx, ('*`')),op(750, fy, local),op(1190,xfy,(do)),op(400,yfx,'#'),op(750, fy, #\\+),op(700, xfx, ##),op(760, yfx, #/\\),op(770, yfx, #\\/),op(780, yfx, #=>),op(790, yfx, #<=>),op(950, xfy, ('#')),op(950, xfy, #)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/flux/flux-master/prolog/wumpus_2_3.pl", :operators "[op(1150,fx,(export)),op(700, xfx, '::'),op(750, fy, '#\\\\+' ),op(700, xfx, '##'),op(700, xfx, '#=' ),op(760, yfx, '#/\\\\' ),op(770, yfx, '#\\\\/' ),op(780, yfx, '#=>' ),op(790, yfx, '#<=>' ),op(800, xfx, isd),op(400, yfx, ('*`')),op(750, fy, local),op(1190,xfy,(do)),op(400,yfx,'#'),op(750, fy, #\\+),op(700, xfx, ##),op(760, yfx, #/\\),op(770, yfx, #\\/),op(780, yfx, #=>),op(790, yfx, #<=>),op(950, xfy, ('#')),op(950, xfy, #)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/flux/flux-master/prolog/indigolog/Interpreters/flux/wumpus_2_3.pl', [op(1150,fx,(export)),op(700, xfx, '::'),op(750, fy, '#\\\\+' ),op(700, xfx, '##'),op(700, xfx, '#=' ),op(760, yfx, '#/\\\\' ),op(770, yfx, '#\\\\/' ),op(780, yfx, '#=>' ),op(790, yfx, '#<=>' ),op(800, xfx, isd),op(400, yfx, ('*`')),op(750, fy, local),op(1190,xfy,(do)),op(400,yfx,'#'),op(750, fy, #\\+),op(700, xfx, ##),op(760, yfx, #/\\),op(770, yfx, #\\/),op(780, yfx, #=>),op(790, yfx, #<=>),op(950, xfy, ('#')),op(950, xfy, #)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/flux/flux-master/prolog/indigolog/Interpreters/flux/wumpus_2_3.pl", :operators "[op(1150,fx,(export)),op(700, xfx, '::'),op(750, fy, '#\\\\+' ),op(700, xfx, '##'),op(700, xfx, '#=' ),op(760, yfx, '#/\\\\' ),op(770, yfx, '#\\\\/' ),op(780, yfx, '#=>' ),op(790, yfx, '#<=>' ),op(800, xfx, isd),op(400, yfx, ('*`')),op(750, fy, local),op(1190,xfy,(do)),op(400,yfx,'#'),op(750, fy, #\\+),op(700, xfx, ##),op(760, yfx, #/\\),op(770, yfx, #\\/),op(780, yfx, #=>),op(790, yfx, #<=>),op(950, xfy, ('#')),op(950, xfy, #)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/logicmoo_utils/logicmoo_utils-master/prolog/xlisting/logicmoo_run_clio.pl', [op(700,xfx,'=@='),op(1150, fx, (rdf_meta)),op(1199,fx,('==>')),op(1190,xfx,('::::')),op(1180,xfx,('==>')),op(1170,xfx,'<==>'),op(1160,xfx,('<-')),op(1150,xfx,'=>'),op(1140,xfx,'<='),op(1130,xfx,'<=>'),op(600,yfx,'&'),op(600,yfx,'v'),op(350,xfx,'xor'),op(300,fx,'~'),op(300,fx,'-'),op(1150,fx,(baseKB:kb_shared)),op(1150,fx,meta_predicate),op(1150,fx,thread_local),op(1150,fx,meta_predicate_transparent),op(1150,fx,(kb_global)),op(1150,fx,(kb_local)),op(1150,fx,baseKB:dynamic_safe),op(700,xfx,('univ_safe')),op(700,xfx,prolog:('univ_safe'))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/logicmoo_utils/logicmoo_utils-master/prolog/xlisting/logicmoo_run_clio.pl", :operators "[op(700,xfx,'=@='),op(1150, fx, (rdf_meta)),op(1199,fx,('==>')),op(1190,xfx,('::::')),op(1180,xfx,('==>')),op(1170,xfx,'<==>'),op(1160,xfx,('<-')),op(1150,xfx,'=>'),op(1140,xfx,'<='),op(1130,xfx,'<=>'),op(600,yfx,'&'),op(600,yfx,'v'),op(350,xfx,'xor'),op(300,fx,'~'),op(300,fx,'-'),op(1150,fx,(baseKB:kb_shared)),op(1150,fx,meta_predicate),op(1150,fx,thread_local),op(1150,fx,meta_predicate_transparent),op(1150,fx,(kb_global)),op(1150,fx,(kb_local)),op(1150,fx,baseKB:dynamic_safe),op(700,xfx,('univ_safe')),op(700,xfx,prolog:('univ_safe'))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/logicmoo_utils/logicmoo_utils-master/prolog/xlisting/logicmoo_run_pldoc.pl', [op(700,xfx,'=@='),op(1150, fx, (rdf_meta)),op(1199,fx,('==>')),op(1190,xfx,('::::')),op(1180,xfx,('==>')),op(1170,xfx,'<==>'),op(1160,xfx,('<-')),op(1150,xfx,'=>'),op(1140,xfx,'<='),op(1130,xfx,'<=>'),op(600,yfx,'&'),op(600,yfx,'v'),op(350,xfx,'xor'),op(300,fx,'~'),op(300,fx,'-'),op(1150,fx,(baseKB:kb_shared)),op(1150,fx,meta_predicate),op(1150,fx,thread_local),op(1150,fx,meta_predicate_transparent),op(1150,fx,(kb_global)),op(1150,fx,(kb_local)),op(1150,fx,baseKB:dynamic_safe),op(700,xfx,('univ_safe')),op(700,xfx,prolog:('univ_safe'))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/logicmoo_utils/logicmoo_utils-master/prolog/xlisting/logicmoo_run_pldoc.pl", :operators "[op(700,xfx,'=@='),op(1150, fx, (rdf_meta)),op(1199,fx,('==>')),op(1190,xfx,('::::')),op(1180,xfx,('==>')),op(1170,xfx,'<==>'),op(1160,xfx,('<-')),op(1150,xfx,'=>'),op(1140,xfx,'<='),op(1130,xfx,'<=>'),op(600,yfx,'&'),op(600,yfx,'v'),op(350,xfx,'xor'),op(300,fx,'~'),op(300,fx,'-'),op(1150,fx,(baseKB:kb_shared)),op(1150,fx,meta_predicate),op(1150,fx,thread_local),op(1150,fx,meta_predicate_transparent),op(1150,fx,(kb_global)),op(1150,fx,(kb_local)),op(1150,fx,baseKB:dynamic_safe),op(700,xfx,('univ_safe')),op(700,xfx,prolog:('univ_safe'))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/logicmoo_utils/logicmoo_utils-master/prolog/xlisting/mpred_pldoc_util.pl', [op(700,xfx,'=@='),op(1150, fx, (rdf_meta)),op(1199,fx,('==>')),op(1190,xfx,('::::')),op(1180,xfx,('==>')),op(1170,xfx,'<==>'),op(1160,xfx,('<-')),op(1150,xfx,'=>'),op(1140,xfx,'<='),op(1130,xfx,'<=>'),op(600,yfx,'&'),op(600,yfx,'v'),op(350,xfx,'xor'),op(300,fx,'~'),op(300,fx,'-'),op(1150,fx,(baseKB:kb_shared)),op(1150,fx,meta_predicate),op(1150,fx,thread_local),op(1150,fx,meta_predicate_transparent),op(1150,fx,(kb_global)),op(1150,fx,(kb_local)),op(1150,fx,baseKB:dynamic_safe),op(700,xfx,('univ_safe')),op(700,xfx,prolog:('univ_safe'))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/logicmoo_utils/logicmoo_utils-master/prolog/xlisting/mpred_pldoc_util.pl", :operators "[op(700,xfx,'=@='),op(1150, fx, (rdf_meta)),op(1199,fx,('==>')),op(1190,xfx,('::::')),op(1180,xfx,('==>')),op(1170,xfx,'<==>'),op(1160,xfx,('<-')),op(1150,xfx,'=>'),op(1140,xfx,'<='),op(1130,xfx,'<=>'),op(600,yfx,'&'),op(600,yfx,'v'),op(350,xfx,'xor'),op(300,fx,'~'),op(300,fx,'-'),op(1150,fx,(baseKB:kb_shared)),op(1150,fx,meta_predicate),op(1150,fx,thread_local),op(1150,fx,meta_predicate_transparent),op(1150,fx,(kb_global)),op(1150,fx,(kb_local)),op(1150,fx,baseKB:dynamic_safe),op(700,xfx,('univ_safe')),op(700,xfx,prolog:('univ_safe'))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/logicmoo_utils/logicmoo_utils-master/prolog/xlisting/logicmoo_run_swish.pl', [op(700,xfx,'=@='),op(1150, fx, (rdf_meta)),op(1199,fx,('==>')),op(1190,xfx,('::::')),op(1180,xfx,('==>')),op(1170,xfx,'<==>'),op(1160,xfx,('<-')),op(1150,xfx,'=>'),op(1140,xfx,'<='),op(1130,xfx,'<=>'),op(600,yfx,'&'),op(600,yfx,'v'),op(350,xfx,'xor'),op(300,fx,'~'),op(300,fx,'-'),op(1150,fx,(baseKB:kb_shared)),op(1150,fx,meta_predicate),op(1150,fx,thread_local),op(1150,fx,meta_predicate_transparent),op(1150,fx,(kb_global)),op(1150,fx,(kb_local)),op(1150,fx,baseKB:dynamic_safe),op(700,xfx,('univ_safe')),op(700,xfx,prolog:('univ_safe'))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/logicmoo_utils/logicmoo_utils-master/prolog/xlisting/logicmoo_run_swish.pl", :operators "[op(700,xfx,'=@='),op(1150, fx, (rdf_meta)),op(1199,fx,('==>')),op(1190,xfx,('::::')),op(1180,xfx,('==>')),op(1170,xfx,'<==>'),op(1160,xfx,('<-')),op(1150,xfx,'=>'),op(1140,xfx,'<='),op(1130,xfx,'<=>'),op(600,yfx,'&'),op(600,yfx,'v'),op(350,xfx,'xor'),op(300,fx,'~'),op(300,fx,'-'),op(1150,fx,(baseKB:kb_shared)),op(1150,fx,meta_predicate),op(1150,fx,thread_local),op(1150,fx,meta_predicate_transparent),op(1150,fx,(kb_global)),op(1150,fx,(kb_local)),op(1150,fx,baseKB:dynamic_safe),op(700,xfx,('univ_safe')),op(700,xfx,prolog:('univ_safe'))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/logicmoo_utils/logicmoo_utils-master/prolog/logicmoo/butterfly.pl', [op(700,xfx,'=@='),op(1150, fx, (rdf_meta)),op(1199,fx,('==>')),op(1190,xfx,('::::')),op(1180,xfx,('==>')),op(1170,xfx,'<==>'),op(1160,xfx,('<-')),op(1150,xfx,'=>'),op(1140,xfx,'<='),op(1130,xfx,'<=>'),op(600,yfx,'&'),op(600,yfx,'v'),op(350,xfx,'xor'),op(300,fx,'~'),op(300,fx,'-'),op(1150,fx,(baseKB:kb_shared)),op(1150,fx,meta_predicate),op(1150,fx,thread_local),op(1150,fx,meta_predicate_transparent),op(1150,fx,(kb_global)),op(1150,fx,(kb_local)),op(1150,fx,baseKB:dynamic_safe),op(700,xfx,('univ_safe')),op(700,xfx,prolog:('univ_safe'))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/logicmoo_utils/logicmoo_utils-master/prolog/logicmoo/butterfly.pl", :operators "[op(700,xfx,'=@='),op(1150, fx, (rdf_meta)),op(1199,fx,('==>')),op(1190,xfx,('::::')),op(1180,xfx,('==>')),op(1170,xfx,'<==>'),op(1160,xfx,('<-')),op(1150,xfx,'=>'),op(1140,xfx,'<='),op(1130,xfx,'<=>'),op(600,yfx,'&'),op(600,yfx,'v'),op(350,xfx,'xor'),op(300,fx,'~'),op(300,fx,'-'),op(1150,fx,(baseKB:kb_shared)),op(1150,fx,meta_predicate),op(1150,fx,thread_local),op(1150,fx,meta_predicate_transparent),op(1150,fx,(kb_global)),op(1150,fx,(kb_local)),op(1150,fx,baseKB:dynamic_safe),op(700,xfx,('univ_safe')),op(700,xfx,prolog:('univ_safe'))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/logicmoo_utils/logicmoo_utils-master/prolog/logicmoo/util_dra.pl', [op(700,xfx,'=@='),op(1150, fx, (rdf_meta)),op(1199,fx,('==>')),op(1190,xfx,('::::')),op(1180,xfx,('==>')),op(1170,xfx,'<==>'),op(1160,xfx,('<-')),op(1150,xfx,'=>'),op(1140,xfx,'<='),op(1130,xfx,'<=>'),op(600,yfx,'&'),op(600,yfx,'v'),op(350,xfx,'xor'),op(300,fx,'~'),op(300,fx,'-'),op(1150,fx,(baseKB:kb_shared)),op(1150,fx,meta_predicate),op(1150,fx,thread_local),op(1150,fx,meta_predicate_transparent),op(1150,fx,(kb_global)),op(1150,fx,(kb_local)),op(1150,fx,baseKB:dynamic_safe),op(700,xfx,('univ_safe')),op(700,xfx,prolog:('univ_safe'))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/logicmoo_utils/logicmoo_utils-master/prolog/logicmoo/util_dra.pl", :operators "[op(700,xfx,'=@='),op(1150, fx, (rdf_meta)),op(1199,fx,('==>')),op(1190,xfx,('::::')),op(1180,xfx,('==>')),op(1170,xfx,'<==>'),op(1160,xfx,('<-')),op(1150,xfx,'=>'),op(1140,xfx,'<='),op(1130,xfx,'<=>'),op(600,yfx,'&'),op(600,yfx,'v'),op(350,xfx,'xor'),op(300,fx,'~'),op(300,fx,'-'),op(1150,fx,(baseKB:kb_shared)),op(1150,fx,meta_predicate),op(1150,fx,thread_local),op(1150,fx,meta_predicate_transparent),op(1150,fx,(kb_global)),op(1150,fx,(kb_local)),op(1150,fx,baseKB:dynamic_safe),op(700,xfx,('univ_safe')),op(700,xfx,prolog:('univ_safe'))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/os_lib/os_lib/src/os_succ.pl', [op( 400, fx, / )]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/os_lib/os_lib/src/os_succ.pl", :operators "[op( 400, fx, / )]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/assertions/assertions-master/tests/andorra/qu_vitor.pl', [op(1125, fx, F),op(978,  xfx, (::)),op(1150, fx,  (decl)),op(1150, xfx, (decl)),op(1150, fx,  (pred)),op(1150, xfx, (pred)),op(1150, fx,  (prop)),op(1150, xfx, (prop)),op(1150, fx,  (modedef)),op(1150, fx,  (calls)),op(1150, xfx, (calls)),op(1150, fx,  (success)),op(1150, xfx, (success)),op(1150, fx,  (comp)),op(1150, xfx, (comp)),op(1150, fx,  (entry)),op(1150, fx,  (exit)),op(1150, xfx, (exit)),op(550,  yfx, (#)),op(500,  fx, (?)),op(500,  fx, (:)),op(500,  fx, (=)),op(500,  fx, (/)),op(500,  fx, (>)),op(500,  fx, (!)),op(500,  fx, (*)),op(500,  fx, (@)),op(700, xfx, ?=)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/assertions/assertions-master/tests/andorra/qu_vitor.pl", :operators "[op(1125, fx, F),op(978,  xfx, (::)),op(1150, fx,  (decl)),op(1150, xfx, (decl)),op(1150, fx,  (pred)),op(1150, xfx, (pred)),op(1150, fx,  (prop)),op(1150, xfx, (prop)),op(1150, fx,  (modedef)),op(1150, fx,  (calls)),op(1150, xfx, (calls)),op(1150, fx,  (success)),op(1150, xfx, (success)),op(1150, fx,  (comp)),op(1150, xfx, (comp)),op(1150, fx,  (entry)),op(1150, fx,  (exit)),op(1150, xfx, (exit)),op(550,  yfx, (#)),op(500,  fx, (?)),op(500,  fx, (:)),op(500,  fx, (=)),op(500,  fx, (/)),op(500,  fx, (>)),op(500,  fx, (!)),op(500,  fx, (*)),op(500,  fx, (@)),op(700, xfx, ?=)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/assertions/assertions-master/tests/andorra/dia_sums.pl', [op(1125, fx, F),op(978,  xfx, (::)),op(1150, fx,  (decl)),op(1150, xfx, (decl)),op(1150, fx,  (pred)),op(1150, xfx, (pred)),op(1150, fx,  (prop)),op(1150, xfx, (prop)),op(1150, fx,  (modedef)),op(1150, fx,  (calls)),op(1150, xfx, (calls)),op(1150, fx,  (success)),op(1150, xfx, (success)),op(1150, fx,  (comp)),op(1150, xfx, (comp)),op(1150, fx,  (entry)),op(1150, fx,  (exit)),op(1150, xfx, (exit)),op(550,  yfx, (#)),op(500,  fx, (?)),op(500,  fx, (:)),op(500,  fx, (=)),op(500,  fx, (/)),op(500,  fx, (>)),op(500,  fx, (!)),op(500,  fx, (*)),op(500,  fx, (@)),op(700, xfx, ?=)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/assertions/assertions-master/tests/andorra/dia_sums.pl", :operators "[op(1125, fx, F),op(978,  xfx, (::)),op(1150, fx,  (decl)),op(1150, xfx, (decl)),op(1150, fx,  (pred)),op(1150, xfx, (pred)),op(1150, fx,  (prop)),op(1150, xfx, (prop)),op(1150, fx,  (modedef)),op(1150, fx,  (calls)),op(1150, xfx, (calls)),op(1150, fx,  (success)),op(1150, xfx, (success)),op(1150, fx,  (comp)),op(1150, xfx, (comp)),op(1150, fx,  (entry)),op(1150, fx,  (exit)),op(1150, xfx, (exit)),op(550,  yfx, (#)),op(500,  fx, (?)),op(500,  fx, (:)),op(500,  fx, (=)),op(500,  fx, (/)),op(500,  fx, (>)),op(500,  fx, (!)),op(500,  fx, (*)),op(500,  fx, (@)),op(700, xfx, ?=)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/assertions/assertions-master/tests/andorra/qu_evan.pl', [op(1125, fx, F),op(978,  xfx, (::)),op(1150, fx,  (decl)),op(1150, xfx, (decl)),op(1150, fx,  (pred)),op(1150, xfx, (pred)),op(1150, fx,  (prop)),op(1150, xfx, (prop)),op(1150, fx,  (modedef)),op(1150, fx,  (calls)),op(1150, xfx, (calls)),op(1150, fx,  (success)),op(1150, xfx, (success)),op(1150, fx,  (comp)),op(1150, xfx, (comp)),op(1150, fx,  (entry)),op(1150, fx,  (exit)),op(1150, xfx, (exit)),op(550,  yfx, (#)),op(500,  fx, (?)),op(500,  fx, (:)),op(500,  fx, (=)),op(500,  fx, (/)),op(500,  fx, (>)),op(500,  fx, (!)),op(500,  fx, (*)),op(500,  fx, (@)),op(700, xfx, ?=)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/assertions/assertions-master/tests/andorra/qu_evan.pl", :operators "[op(1125, fx, F),op(978,  xfx, (::)),op(1150, fx,  (decl)),op(1150, xfx, (decl)),op(1150, fx,  (pred)),op(1150, xfx, (pred)),op(1150, fx,  (prop)),op(1150, xfx, (prop)),op(1150, fx,  (modedef)),op(1150, fx,  (calls)),op(1150, xfx, (calls)),op(1150, fx,  (success)),op(1150, xfx, (success)),op(1150, fx,  (comp)),op(1150, xfx, (comp)),op(1150, fx,  (entry)),op(1150, fx,  (exit)),op(1150, xfx, (exit)),op(550,  yfx, (#)),op(500,  fx, (?)),op(500,  fx, (:)),op(500,  fx, (=)),op(500,  fx, (/)),op(500,  fx, (>)),op(500,  fx, (!)),op(500,  fx, (*)),op(500,  fx, (@)),op(700, xfx, ?=)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/assertions/assertions-master/tests/andorra/mqu.pl', [op(1125, fx, F),op(978,  xfx, (::)),op(1150, fx,  (decl)),op(1150, xfx, (decl)),op(1150, fx,  (pred)),op(1150, xfx, (pred)),op(1150, fx,  (prop)),op(1150, xfx, (prop)),op(1150, fx,  (modedef)),op(1150, fx,  (calls)),op(1150, xfx, (calls)),op(1150, fx,  (success)),op(1150, xfx, (success)),op(1150, fx,  (comp)),op(1150, xfx, (comp)),op(1150, fx,  (entry)),op(1150, fx,  (exit)),op(1150, xfx, (exit)),op(550,  yfx, (#)),op(500,  fx, (?)),op(500,  fx, (:)),op(500,  fx, (=)),op(500,  fx, (/)),op(500,  fx, (>)),op(500,  fx, (!)),op(500,  fx, (*)),op(500,  fx, (@)),op(700, xfx, ?=)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/assertions/assertions-master/tests/andorra/mqu.pl", :operators "[op(1125, fx, F),op(978,  xfx, (::)),op(1150, fx,  (decl)),op(1150, xfx, (decl)),op(1150, fx,  (pred)),op(1150, xfx, (pred)),op(1150, fx,  (prop)),op(1150, xfx, (prop)),op(1150, fx,  (modedef)),op(1150, fx,  (calls)),op(1150, xfx, (calls)),op(1150, fx,  (success)),op(1150, xfx, (success)),op(1150, fx,  (comp)),op(1150, xfx, (comp)),op(1150, fx,  (entry)),op(1150, fx,  (exit)),op(1150, xfx, (exit)),op(550,  yfx, (#)),op(500,  fx, (?)),op(500,  fx, (:)),op(500,  fx, (=)),op(500,  fx, (/)),op(500,  fx, (>)),op(500,  fx, (!)),op(500,  fx, (*)),op(500,  fx, (@)),op(700, xfx, ?=)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/assertions/assertions-master/prolog/foreign/foreign_props.pl', [op(1125, fx, F),op(978,  xfx, (::)),op(1150, fx,  (decl)),op(1150, xfx, (decl)),op(1150, fx,  (pred)),op(1150, xfx, (pred)),op(1150, fx,  (prop)),op(1150, xfx, (prop)),op(1150, fx,  (modedef)),op(1150, fx,  (calls)),op(1150, xfx, (calls)),op(1150, fx,  (success)),op(1150, xfx, (success)),op(1150, fx,  (comp)),op(1150, xfx, (comp)),op(1150, fx,  (entry)),op(1150, fx,  (exit)),op(1150, xfx, (exit)),op(550,  yfx, (#)),op(500,  fx, (?)),op(500,  fx, (:)),op(500,  fx, (=)),op(500,  fx, (/)),op(500,  fx, (>)),op(500,  fx, (!)),op(500,  fx, (*)),op(500,  fx, (@)),op(700, xfx, ?=)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/assertions/assertions-master/prolog/foreign/foreign_props.pl", :operators "[op(1125, fx, F),op(978,  xfx, (::)),op(1150, fx,  (decl)),op(1150, xfx, (decl)),op(1150, fx,  (pred)),op(1150, xfx, (pred)),op(1150, fx,  (prop)),op(1150, xfx, (prop)),op(1150, fx,  (modedef)),op(1150, fx,  (calls)),op(1150, xfx, (calls)),op(1150, fx,  (success)),op(1150, xfx, (success)),op(1150, fx,  (comp)),op(1150, xfx, (comp)),op(1150, fx,  (entry)),op(1150, fx,  (exit)),op(1150, xfx, (exit)),op(550,  yfx, (#)),op(500,  fx, (?)),op(500,  fx, (:)),op(500,  fx, (=)),op(500,  fx, (/)),op(500,  fx, (>)),op(500,  fx, (!)),op(500,  fx, (*)),op(500,  fx, (@)),op(700, xfx, ?=)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/assertions/assertions-master/prolog/globprops.pl', [op(1125, fx, F),op(978,  xfx, (::)),op(1150, fx,  (decl)),op(1150, xfx, (decl)),op(1150, fx,  (pred)),op(1150, xfx, (pred)),op(1150, fx,  (prop)),op(1150, xfx, (prop)),op(1150, fx,  (modedef)),op(1150, fx,  (calls)),op(1150, xfx, (calls)),op(1150, fx,  (success)),op(1150, xfx, (success)),op(1150, fx,  (comp)),op(1150, xfx, (comp)),op(1150, fx,  (entry)),op(1150, fx,  (exit)),op(1150, xfx, (exit)),op(550,  yfx, (#)),op(500,  fx, (?)),op(500,  fx, (:)),op(500,  fx, (=)),op(500,  fx, (/)),op(500,  fx, (>)),op(500,  fx, (!)),op(500,  fx, (*)),op(500,  fx, (@)),op(700, xfx, ?=)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/assertions/assertions-master/prolog/globprops.pl", :operators "[op(1125, fx, F),op(978,  xfx, (::)),op(1150, fx,  (decl)),op(1150, xfx, (decl)),op(1150, fx,  (pred)),op(1150, xfx, (pred)),op(1150, fx,  (prop)),op(1150, xfx, (prop)),op(1150, fx,  (modedef)),op(1150, fx,  (calls)),op(1150, xfx, (calls)),op(1150, fx,  (success)),op(1150, xfx, (success)),op(1150, fx,  (comp)),op(1150, xfx, (comp)),op(1150, fx,  (entry)),op(1150, fx,  (exit)),op(1150, xfx, (exit)),op(550,  yfx, (#)),op(500,  fx, (?)),op(500,  fx, (:)),op(500,  fx, (=)),op(500,  fx, (/)),op(500,  fx, (>)),op(500,  fx, (!)),op(500,  fx, (*)),op(500,  fx, (@)),op(700, xfx, ?=)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/assertions/assertions-master/prolog/metaprops.pl', [op(1125, fx, F),op(978,  xfx, (::)),op(1150, fx,  (decl)),op(1150, xfx, (decl)),op(1150, fx,  (pred)),op(1150, xfx, (pred)),op(1150, fx,  (prop)),op(1150, xfx, (prop)),op(1150, fx,  (modedef)),op(1150, fx,  (calls)),op(1150, xfx, (calls)),op(1150, fx,  (success)),op(1150, xfx, (success)),op(1150, fx,  (comp)),op(1150, xfx, (comp)),op(1150, fx,  (entry)),op(1150, fx,  (exit)),op(1150, xfx, (exit)),op(550,  yfx, (#)),op(500,  fx, (?)),op(500,  fx, (:)),op(500,  fx, (=)),op(500,  fx, (/)),op(500,  fx, (>)),op(500,  fx, (!)),op(500,  fx, (*)),op(500,  fx, (@)),op(700, xfx, ?=)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/assertions/assertions-master/prolog/metaprops.pl", :operators "[op(1125, fx, F),op(978,  xfx, (::)),op(1150, fx,  (decl)),op(1150, xfx, (decl)),op(1150, fx,  (pred)),op(1150, xfx, (pred)),op(1150, fx,  (prop)),op(1150, xfx, (prop)),op(1150, fx,  (modedef)),op(1150, fx,  (calls)),op(1150, xfx, (calls)),op(1150, fx,  (success)),op(1150, xfx, (success)),op(1150, fx,  (comp)),op(1150, xfx, (comp)),op(1150, fx,  (entry)),op(1150, fx,  (exit)),op(1150, xfx, (exit)),op(550,  yfx, (#)),op(500,  fx, (?)),op(500,  fx, (:)),op(500,  fx, (=)),op(500,  fx, (/)),op(500,  fx, (>)),op(500,  fx, (!)),op(500,  fx, (*)),op(500,  fx, (@)),op(700, xfx, ?=)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/resp/resp-master/prolog/resp.plt', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/resp/resp-master/prolog/resp.plt", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/mlu/mlu/src/lib/plot_on.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/mlu/mlu/src/lib/plot_on.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/mlu/mlu/src/k_fold_pairwise_comparisons.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/mlu/mlu/src/k_fold_pairwise_comparisons.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/real/real/examples/pagerank.pl', [op(950,fx,<-),op(950,yfx,<-),op(950,yfx,<<-),op(950,xf,<<-),op(600,xfy,~),op(400,yfx,'%x%'),op(400,yfx,'%%'),op(400,yfx,'%/%'),op(400,yfx,@*@),op(400,yfx,@^@),op(400,yfx,@~@),op(400,yfx,$),op(400,yfx,@),op(800,fx,@),op(700,fx,!),op(700,fx,~),op(700,xfx,<=),op(750,xfy,;),op(750,xfy,::),op(750,xfy,&),op(750,xfy,&&),op(400,xfy,=+),op(500,xfy,++),op(100, yf, []),op(100, yf, '()')]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/real/real/examples/pagerank.pl", :operators "[op(950,fx,<-),op(950,yfx,<-),op(950,yfx,<<-),op(950,xf,<<-),op(600,xfy,~),op(400,yfx,'%x%'),op(400,yfx,'%%'),op(400,yfx,'%/%'),op(400,yfx,@*@),op(400,yfx,@^@),op(400,yfx,@~@),op(400,yfx,$),op(400,yfx,@),op(800,fx,@),op(700,fx,!),op(700,fx,~),op(700,xfx,<=),op(750,xfy,;),op(750,xfy,::),op(750,xfy,&),op(750,xfy,&&),op(400,xfy,=+),op(500,xfy,++),op(100, yf, []),op(100, yf, '()')]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/real/real/examples/for_real.pl', [op(950,fx,<-),op(950,yfx,<-),op(950,yfx,<<-),op(950,xf,<<-),op(600,xfy,~),op(400,yfx,'%x%'),op(400,yfx,'%%'),op(400,yfx,'%/%'),op(400,yfx,@*@),op(400,yfx,@^@),op(400,yfx,@~@),op(400,yfx,$),op(400,yfx,@),op(800,fx,@),op(700,fx,!),op(700,fx,~),op(700,xfx,<=),op(750,xfy,;),op(750,xfy,::),op(750,xfy,&),op(750,xfy,&&),op(400,xfy,=+),op(500,xfy,++),op(100, yf, []),op(100, yf, '()')]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/real/real/examples/for_real.pl", :operators "[op(950,fx,<-),op(950,yfx,<-),op(950,yfx,<<-),op(950,xf,<<-),op(600,xfy,~),op(400,yfx,'%x%'),op(400,yfx,'%%'),op(400,yfx,'%/%'),op(400,yfx,@*@),op(400,yfx,@^@),op(400,yfx,@~@),op(400,yfx,$),op(400,yfx,@),op(800,fx,@),op(700,fx,!),op(700,fx,~),op(700,xfx,<=),op(750,xfy,;),op(750,xfy,::),op(750,xfy,&),op(750,xfy,&&),op(400,xfy,=+),op(500,xfy,++),op(100, yf, []),op(100, yf, '()')]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/dictoo/dictoo-master/t/dictoo_tests.pl', [op(2,fx,?)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/dictoo/dictoo-master/t/dictoo_tests.pl", :operators "[op(2,fx,?)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/sparqlprog/sparqlprog-0.1.2/prolog/sparqlprog/ontologies/uniprot.pl', [op(1150,fx,??),op(1150,xfy,??),op(1150,fx,p),op(300,xfy,absoluteRegion),op(300,xfy,author),op(300,xfy,availability),op(300,xfy,bindsTo),op(300,xfy,catalysisDirection),op(300,xfy,cellType),op(300,xfy,cellularLocation),op(300,xfy,chemicalFormula),op(300,xfy,cofactor),op(300,xfy,comment),op(300,xfy,component),op(300,xfy,componentStoichiometry),op(300,xfy,confidence),op(300,xfy,controlType),op(300,xfy,controlled),op(300,xfy,controller),op(300,xfy,conversionDirection),op(300,xfy,dataSource),op(300,xfy,db),op(300,xfy,dbVersion),op(300,xfy,deltaG),op(300,xfy,deltaGPrime0),op(300,xfy,deltaH),op(300,xfy,deltaS),op(300,xfy,displayName),op(300,xfy,eCNumber),op(300,xfy,entityFeature),op(300,xfy,entityReference),op(300,xfy,entityReferenceType),op(300,xfy,evidence),op(300,xfy,evidenceCode),op(300,xfy,experimentalFeature),op(300,xfy,experimentalForm),op(300,xfy,experimentalFormDescription),op(300,xfy,experimentalFormEntity),op(300,xfy,feature),op(300,xfy,featureLocation),op(300,xfy,featureLocationType),op(300,xfy,id),op(300,xfy,idVersion),op(300,xfy,interactionScore),op(300,xfy,interactionType),op(300,xfy,intraMolecular),op(300,xfy,ionicStrength),op(300,xfy,kEQ),op(300,xfy,kPrime),op(300,xfy,left),op(300,xfy,memberEntityReference),op(300,xfy,memberFeature),op(300,xfy,memberPhysicalEntity),op(300,xfy,modificationType),op(300,xfy,molecularWeight),op(300,xfy,name),op(300,xfy,nextStep),op(300,xfy,notFeature),op(300,xfy,organism),op(300,xfy,pMg),op(300,xfy,participant),op(300,xfy,participantStoichiometry),op(300,xfy,pathwayComponent),op(300,xfy,pathwayOrder),op(300,xfy,patoData),op(300,xfy,ph),op(300,xfy,phenotype),op(300,xfy,physicalEntity),op(300,xfy,positionStatus),op(300,xfy,product),op(300,xfy,regionType),op(300,xfy,relationshipType),op(300,xfy,right),op(300,xfy,scoreSource),op(300,xfy,sequence),op(300,xfy,sequenceIntervalBegin),op(300,xfy,sequenceIntervalEnd),op(300,xfy,sequencePosition),op(300,xfy,source),op(300,xfy,spontaneous),op(300,xfy,standardName),op(300,xfy,stepConversion),op(300,xfy,stepDirection),op(300,xfy,stepProcess),op(300,xfy,stoichiometricCoefficient),op(300,xfy,structure),op(300,xfy,structureData),op(300,xfy,structureFormat),op(300,xfy,subRegion),op(300,xfy,temperature),op(300,xfy,template),op(300,xfy,templateDirection),op(300,xfy,term),op(300,xfy,tissue),op(300,xfy,title),op(300,xfy,url),op(300,xfy,value),op(300,xfy,xref),op(300,xfy,year),op(300,xfy,first),op(300,xfy,object),op(300,xfy,predicate),op(300,xfy,rest),op(300,xfy,subject),op(300,xfy,type),op(300,xfy,domain),op(300,xfy,isDefinedBy),op(300,xfy,label),op(300,xfy,member_triple),op(300,xfy,range),op(300,xfy,seeAlso),op(300,xfy,subClassOf),op(300,xfy,subPropertyOf),op(300,xfy,allValuesFrom),op(300,xfy,backwardCompatibleWitesh),op(300,xfy,cardinality),op(300,xfy,complementOf),op(300,xfy,differentFrom),op(300,xfy,disjointWith),op(300,xfy,distinctMembers),op(300,xfy,equivalentClass),op(300,xfy,equivalentProperty),op(300,xfy,hasValue),op(300,xfy,imports),op(300,xfy,incompatibleWith),op(300,xfy,intersectionOf),op(300,xfy,inverseOf),op(300,xfy,maxCardinality),op(300,xfy,minCardinality),op(300,xfy,onProperty),op(300,xfy,oneOf),op(300,xfy,priorVersion),op(300,xfy,sameAs),op(300,xfy,sameIndividualAs),op(300,xfy,someValuesFrom),op(300,xfy,unionOf),op(300,xfy,versionInfo),op(300,xfy,some),op(300,xfy,all)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/sparqlprog/sparqlprog-0.1.2/prolog/sparqlprog/ontologies/uniprot.pl", :operators "[op(1150,fx,??),op(1150,xfy,??),op(1150,fx,p),op(300,xfy,absoluteRegion),op(300,xfy,author),op(300,xfy,availability),op(300,xfy,bindsTo),op(300,xfy,catalysisDirection),op(300,xfy,cellType),op(300,xfy,cellularLocation),op(300,xfy,chemicalFormula),op(300,xfy,cofactor),op(300,xfy,comment),op(300,xfy,component),op(300,xfy,componentStoichiometry),op(300,xfy,confidence),op(300,xfy,controlType),op(300,xfy,controlled),op(300,xfy,controller),op(300,xfy,conversionDirection),op(300,xfy,dataSource),op(300,xfy,db),op(300,xfy,dbVersion),op(300,xfy,deltaG),op(300,xfy,deltaGPrime0),op(300,xfy,deltaH),op(300,xfy,deltaS),op(300,xfy,displayName),op(300,xfy,eCNumber),op(300,xfy,entityFeature),op(300,xfy,entityReference),op(300,xfy,entityReferenceType),op(300,xfy,evidence),op(300,xfy,evidenceCode),op(300,xfy,experimentalFeature),op(300,xfy,experimentalForm),op(300,xfy,experimentalFormDescription),op(300,xfy,experimentalFormEntity),op(300,xfy,feature),op(300,xfy,featureLocation),op(300,xfy,featureLocationType),op(300,xfy,id),op(300,xfy,idVersion),op(300,xfy,interactionScore),op(300,xfy,interactionType),op(300,xfy,intraMolecular),op(300,xfy,ionicStrength),op(300,xfy,kEQ),op(300,xfy,kPrime),op(300,xfy,left),op(300,xfy,memberEntityReference),op(300,xfy,memberFeature),op(300,xfy,memberPhysicalEntity),op(300,xfy,modificationType),op(300,xfy,molecularWeight),op(300,xfy,name),op(300,xfy,nextStep),op(300,xfy,notFeature),op(300,xfy,organism),op(300,xfy,pMg),op(300,xfy,participant),op(300,xfy,participantStoichiometry),op(300,xfy,pathwayComponent),op(300,xfy,pathwayOrder),op(300,xfy,patoData),op(300,xfy,ph),op(300,xfy,phenotype),op(300,xfy,physicalEntity),op(300,xfy,positionStatus),op(300,xfy,product),op(300,xfy,regionType),op(300,xfy,relationshipType),op(300,xfy,right),op(300,xfy,scoreSource),op(300,xfy,sequence),op(300,xfy,sequenceIntervalBegin),op(300,xfy,sequenceIntervalEnd),op(300,xfy,sequencePosition),op(300,xfy,source),op(300,xfy,spontaneous),op(300,xfy,standardName),op(300,xfy,stepConversion),op(300,xfy,stepDirection),op(300,xfy,stepProcess),op(300,xfy,stoichiometricCoefficient),op(300,xfy,structure),op(300,xfy,structureData),op(300,xfy,structureFormat),op(300,xfy,subRegion),op(300,xfy,temperature),op(300,xfy,template),op(300,xfy,templateDirection),op(300,xfy,term),op(300,xfy,tissue),op(300,xfy,title),op(300,xfy,url),op(300,xfy,value),op(300,xfy,xref),op(300,xfy,year),op(300,xfy,first),op(300,xfy,object),op(300,xfy,predicate),op(300,xfy,rest),op(300,xfy,subject),op(300,xfy,type),op(300,xfy,domain),op(300,xfy,isDefinedBy),op(300,xfy,label),op(300,xfy,member_triple),op(300,xfy,range),op(300,xfy,seeAlso),op(300,xfy,subClassOf),op(300,xfy,subPropertyOf),op(300,xfy,allValuesFrom),op(300,xfy,backwardCompatibleWitesh),op(300,xfy,cardinality),op(300,xfy,complementOf),op(300,xfy,differentFrom),op(300,xfy,disjointWith),op(300,xfy,distinctMembers),op(300,xfy,equivalentClass),op(300,xfy,equivalentProperty),op(300,xfy,hasValue),op(300,xfy,imports),op(300,xfy,incompatibleWith),op(300,xfy,intersectionOf),op(300,xfy,inverseOf),op(300,xfy,maxCardinality),op(300,xfy,minCardinality),op(300,xfy,onProperty),op(300,xfy,oneOf),op(300,xfy,priorVersion),op(300,xfy,sameAs),op(300,xfy,sameIndividualAs),op(300,xfy,someValuesFrom),op(300,xfy,unionOf),op(300,xfy,versionInfo),op(300,xfy,some),op(300,xfy,all)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/sparqlprog/sparqlprog-0.1.2/prolog/sparqlprog/nlp_util.pl', [op(1150,fx,??),op(1150,xfy,??),op(1150,fx,p),op(300,xfy,absoluteRegion),op(300,xfy,author),op(300,xfy,availability),op(300,xfy,bindsTo),op(300,xfy,catalysisDirection),op(300,xfy,cellType),op(300,xfy,cellularLocation),op(300,xfy,chemicalFormula),op(300,xfy,cofactor),op(300,xfy,comment),op(300,xfy,component),op(300,xfy,componentStoichiometry),op(300,xfy,confidence),op(300,xfy,controlType),op(300,xfy,controlled),op(300,xfy,controller),op(300,xfy,conversionDirection),op(300,xfy,dataSource),op(300,xfy,db),op(300,xfy,dbVersion),op(300,xfy,deltaG),op(300,xfy,deltaGPrime0),op(300,xfy,deltaH),op(300,xfy,deltaS),op(300,xfy,displayName),op(300,xfy,eCNumber),op(300,xfy,entityFeature),op(300,xfy,entityReference),op(300,xfy,entityReferenceType),op(300,xfy,evidence),op(300,xfy,evidenceCode),op(300,xfy,experimentalFeature),op(300,xfy,experimentalForm),op(300,xfy,experimentalFormDescription),op(300,xfy,experimentalFormEntity),op(300,xfy,feature),op(300,xfy,featureLocation),op(300,xfy,featureLocationType),op(300,xfy,id),op(300,xfy,idVersion),op(300,xfy,interactionScore),op(300,xfy,interactionType),op(300,xfy,intraMolecular),op(300,xfy,ionicStrength),op(300,xfy,kEQ),op(300,xfy,kPrime),op(300,xfy,left),op(300,xfy,memberEntityReference),op(300,xfy,memberFeature),op(300,xfy,memberPhysicalEntity),op(300,xfy,modificationType),op(300,xfy,molecularWeight),op(300,xfy,name),op(300,xfy,nextStep),op(300,xfy,notFeature),op(300,xfy,organism),op(300,xfy,pMg),op(300,xfy,participant),op(300,xfy,participantStoichiometry),op(300,xfy,pathwayComponent),op(300,xfy,pathwayOrder),op(300,xfy,patoData),op(300,xfy,ph),op(300,xfy,phenotype),op(300,xfy,physicalEntity),op(300,xfy,positionStatus),op(300,xfy,product),op(300,xfy,regionType),op(300,xfy,relationshipType),op(300,xfy,right),op(300,xfy,scoreSource),op(300,xfy,sequence),op(300,xfy,sequenceIntervalBegin),op(300,xfy,sequenceIntervalEnd),op(300,xfy,sequencePosition),op(300,xfy,source),op(300,xfy,spontaneous),op(300,xfy,standardName),op(300,xfy,stepConversion),op(300,xfy,stepDirection),op(300,xfy,stepProcess),op(300,xfy,stoichiometricCoefficient),op(300,xfy,structure),op(300,xfy,structureData),op(300,xfy,structureFormat),op(300,xfy,subRegion),op(300,xfy,temperature),op(300,xfy,template),op(300,xfy,templateDirection),op(300,xfy,term),op(300,xfy,tissue),op(300,xfy,title),op(300,xfy,url),op(300,xfy,value),op(300,xfy,xref),op(300,xfy,year),op(300,xfy,first),op(300,xfy,object),op(300,xfy,predicate),op(300,xfy,rest),op(300,xfy,subject),op(300,xfy,type),op(300,xfy,domain),op(300,xfy,isDefinedBy),op(300,xfy,label),op(300,xfy,member_triple),op(300,xfy,range),op(300,xfy,seeAlso),op(300,xfy,subClassOf),op(300,xfy,subPropertyOf),op(300,xfy,allValuesFrom),op(300,xfy,backwardCompatibleWitesh),op(300,xfy,cardinality),op(300,xfy,complementOf),op(300,xfy,differentFrom),op(300,xfy,disjointWith),op(300,xfy,distinctMembers),op(300,xfy,equivalentClass),op(300,xfy,equivalentProperty),op(300,xfy,hasValue),op(300,xfy,imports),op(300,xfy,incompatibleWith),op(300,xfy,intersectionOf),op(300,xfy,inverseOf),op(300,xfy,maxCardinality),op(300,xfy,minCardinality),op(300,xfy,onProperty),op(300,xfy,oneOf),op(300,xfy,priorVersion),op(300,xfy,sameAs),op(300,xfy,sameIndividualAs),op(300,xfy,someValuesFrom),op(300,xfy,unionOf),op(300,xfy,versionInfo),op(300,xfy,some),op(300,xfy,all)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/sparqlprog/sparqlprog-0.1.2/prolog/sparqlprog/nlp_util.pl", :operators "[op(1150,fx,??),op(1150,xfy,??),op(1150,fx,p),op(300,xfy,absoluteRegion),op(300,xfy,author),op(300,xfy,availability),op(300,xfy,bindsTo),op(300,xfy,catalysisDirection),op(300,xfy,cellType),op(300,xfy,cellularLocation),op(300,xfy,chemicalFormula),op(300,xfy,cofactor),op(300,xfy,comment),op(300,xfy,component),op(300,xfy,componentStoichiometry),op(300,xfy,confidence),op(300,xfy,controlType),op(300,xfy,controlled),op(300,xfy,controller),op(300,xfy,conversionDirection),op(300,xfy,dataSource),op(300,xfy,db),op(300,xfy,dbVersion),op(300,xfy,deltaG),op(300,xfy,deltaGPrime0),op(300,xfy,deltaH),op(300,xfy,deltaS),op(300,xfy,displayName),op(300,xfy,eCNumber),op(300,xfy,entityFeature),op(300,xfy,entityReference),op(300,xfy,entityReferenceType),op(300,xfy,evidence),op(300,xfy,evidenceCode),op(300,xfy,experimentalFeature),op(300,xfy,experimentalForm),op(300,xfy,experimentalFormDescription),op(300,xfy,experimentalFormEntity),op(300,xfy,feature),op(300,xfy,featureLocation),op(300,xfy,featureLocationType),op(300,xfy,id),op(300,xfy,idVersion),op(300,xfy,interactionScore),op(300,xfy,interactionType),op(300,xfy,intraMolecular),op(300,xfy,ionicStrength),op(300,xfy,kEQ),op(300,xfy,kPrime),op(300,xfy,left),op(300,xfy,memberEntityReference),op(300,xfy,memberFeature),op(300,xfy,memberPhysicalEntity),op(300,xfy,modificationType),op(300,xfy,molecularWeight),op(300,xfy,name),op(300,xfy,nextStep),op(300,xfy,notFeature),op(300,xfy,organism),op(300,xfy,pMg),op(300,xfy,participant),op(300,xfy,participantStoichiometry),op(300,xfy,pathwayComponent),op(300,xfy,pathwayOrder),op(300,xfy,patoData),op(300,xfy,ph),op(300,xfy,phenotype),op(300,xfy,physicalEntity),op(300,xfy,positionStatus),op(300,xfy,product),op(300,xfy,regionType),op(300,xfy,relationshipType),op(300,xfy,right),op(300,xfy,scoreSource),op(300,xfy,sequence),op(300,xfy,sequenceIntervalBegin),op(300,xfy,sequenceIntervalEnd),op(300,xfy,sequencePosition),op(300,xfy,source),op(300,xfy,spontaneous),op(300,xfy,standardName),op(300,xfy,stepConversion),op(300,xfy,stepDirection),op(300,xfy,stepProcess),op(300,xfy,stoichiometricCoefficient),op(300,xfy,structure),op(300,xfy,structureData),op(300,xfy,structureFormat),op(300,xfy,subRegion),op(300,xfy,temperature),op(300,xfy,template),op(300,xfy,templateDirection),op(300,xfy,term),op(300,xfy,tissue),op(300,xfy,title),op(300,xfy,url),op(300,xfy,value),op(300,xfy,xref),op(300,xfy,year),op(300,xfy,first),op(300,xfy,object),op(300,xfy,predicate),op(300,xfy,rest),op(300,xfy,subject),op(300,xfy,type),op(300,xfy,domain),op(300,xfy,isDefinedBy),op(300,xfy,label),op(300,xfy,member_triple),op(300,xfy,range),op(300,xfy,seeAlso),op(300,xfy,subClassOf),op(300,xfy,subPropertyOf),op(300,xfy,allValuesFrom),op(300,xfy,backwardCompatibleWitesh),op(300,xfy,cardinality),op(300,xfy,complementOf),op(300,xfy,differentFrom),op(300,xfy,disjointWith),op(300,xfy,distinctMembers),op(300,xfy,equivalentClass),op(300,xfy,equivalentProperty),op(300,xfy,hasValue),op(300,xfy,imports),op(300,xfy,incompatibleWith),op(300,xfy,intersectionOf),op(300,xfy,inverseOf),op(300,xfy,maxCardinality),op(300,xfy,minCardinality),op(300,xfy,onProperty),op(300,xfy,oneOf),op(300,xfy,priorVersion),op(300,xfy,sameAs),op(300,xfy,sameIndividualAs),op(300,xfy,someValuesFrom),op(300,xfy,unionOf),op(300,xfy,versionInfo),op(300,xfy,some),op(300,xfy,all)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/refactor/refactor-master/tests/refactor_05.plt', [op(700, xfy, myis),op(700, xfy, myis2),op(100,xfy,(@@)),op(100,xfy,($@))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/refactor/refactor-master/tests/refactor_05.plt", :operators "[op(700, xfy, myis),op(700, xfy, myis2),op(100,xfy,(@@)),op(100,xfy,($@))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/refactor/refactor-master/tests/meta1.pl', [op(700, xfy, myis),op(700, xfy, myis2),op(100,xfy,(@@)),op(100,xfy,($@))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/refactor/refactor-master/tests/meta1.pl", :operators "[op(700, xfy, myis),op(700, xfy, myis2),op(100,xfy,(@@)),op(100,xfy,($@))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/refactor/refactor-master/tests/refactor_14.plt', [op(700, xfy, myis),op(700, xfy, myis2),op(100,xfy,(@@)),op(100,xfy,($@))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/refactor/refactor-master/tests/refactor_14.plt", :operators "[op(700, xfy, myis),op(700, xfy, myis2),op(100,xfy,(@@)),op(100,xfy,($@))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/refactor/refactor-master/tests/refactor_29.plt', [op(700, xfy, myis),op(700, xfy, myis2),op(100,xfy,(@@)),op(100,xfy,($@))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/refactor/refactor-master/tests/refactor_29.plt", :operators "[op(700, xfy, myis),op(700, xfy, myis2),op(100,xfy,(@@)),op(100,xfy,($@))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/refactor/refactor-master/tests/refactor_07.plt', [op(700, xfy, myis),op(700, xfy, myis2),op(100,xfy,(@@)),op(100,xfy,($@))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/refactor/refactor-master/tests/refactor_07.plt", :operators "[op(700, xfy, myis),op(700, xfy, myis2),op(100,xfy,(@@)),op(100,xfy,($@))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/refactor/refactor-master/tests/refactor_24.plt', [op(700, xfy, myis),op(700, xfy, myis2),op(100,xfy,(@@)),op(100,xfy,($@))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/refactor/refactor-master/tests/refactor_24.plt", :operators "[op(700, xfy, myis),op(700, xfy, myis2),op(100,xfy,(@@)),op(100,xfy,($@))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/refactor/refactor-master/tests/refactor_28.plt', [op(700, xfy, myis),op(700, xfy, myis2),op(100,xfy,(@@)),op(100,xfy,($@))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/refactor/refactor-master/tests/refactor_28.plt", :operators "[op(700, xfy, myis),op(700, xfy, myis2),op(100,xfy,(@@)),op(100,xfy,($@))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/refactor/refactor-master/tests/refactor_42.plt', [op(700, xfy, myis),op(700, xfy, myis2),op(100,xfy,(@@)),op(100,xfy,($@))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/refactor/refactor-master/tests/refactor_42.plt", :operators "[op(700, xfy, myis),op(700, xfy, myis2),op(100,xfy,(@@)),op(100,xfy,($@))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/refactor/refactor-master/tests/refactor_02.plt', [op(700, xfy, myis),op(700, xfy, myis2),op(100,xfy,(@@)),op(100,xfy,($@))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/refactor/refactor-master/tests/refactor_02.plt", :operators "[op(700, xfy, myis),op(700, xfy, myis2),op(100,xfy,(@@)),op(100,xfy,($@))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/refactor/refactor-master/tests/ex15.pl', [op(700, xfy, myis),op(700, xfy, myis2),op(100,xfy,(@@)),op(100,xfy,($@))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/refactor/refactor-master/tests/ex15.pl", :operators "[op(700, xfy, myis),op(700, xfy, myis2),op(100,xfy,(@@)),op(100,xfy,($@))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/refactor/refactor-master/tests/refactor_19.plt', [op(700, xfy, myis),op(700, xfy, myis2),op(100,xfy,(@@)),op(100,xfy,($@))]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/refactor/refactor-master/tests/refactor_19.plt", :operators "[op(700, xfy, myis),op(700, xfy, myis2),op(100,xfy,(@@)),op(100,xfy,($@))]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/sindice/sindice/prolog/sindice.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/sindice/sindice/prolog/sindice.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/slack_prolog/slack_prolog-master/t/slack_mud.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/slack_prolog/slack_prolog-master/t/slack_mud.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/logicmoo_base/logicmoo_base-master/prolog/logicmoo/pdt_server/org.cs3.prolog.library_3.1.2.201603251848/pl/utils4modules_visibility_WORK_IN_PROGRESS.pl', [op(200, fy,  user:(@)),op(250, yfx, user:(?)),op(990, xfx, user:(:=)),op(1190,xfx,('::::')),op(1180,xfx,('==>')),op(1170,xfx,'<==>'),op(1160,xfx,('<-')),op(1150,xfx,'=>'),op(1140,xfx,'<='),op(1130,xfx,'<=>'),op(600,yfx,'&'),op(600,yfx,'v'),op(350,xfx,'xor'),op(300,fx,'~'),op(300,fx,'-'),op(1199,fx,('==>')),op(1150,fx,(user:kb_shared)),op(1150,xfx,'<=>'),op(400,yfx,'&'),op(500,yfx,'v'),op(1150,fx,(was_dynamic)),op(1150,fx,(was_multifile)),op(1150,fy,(was_module_transparent)),op(1150,fx,(was_export)),op(400, fy, baseKB:(cir) ),op(1075,xfx,user:'<-'),op(400,fy,cir),op(1075,xfx,'=>'),op(1075,xfx,'<-'),op(1075,xfx,'<=>'),op(800,xfx,'=<>='),op(1190,xfx,(:-)),op(1200,fy,(is_entailed_u)),op(1000,fy,(kif_add)),op(1150,fx,'default'),op(1150,fx,'fact'),op(1150,fx,constraint),op(1150,fx,prolog),op(1150,fx,explain),op(1150,fx,predict),op(1150,fx,define),op(1150,fx,th_set),op(1150,fx,th_flag),op(1150,fx,th_reset),op(1150,fy,h),op(1150,fx,thconsult),op(1150,fx,thtrans),op(1150,fx,thcompile),op(1130,xfx,:),op(1120,xfx,==),op(1120,xfx,equiv),op(1110,xfx,<-),op(1110,xfx,=>),op(1100,xfy,or),op(1000,xfy,and),op(1000,xfy,&),op(950,fy,~),op(950,fy,not),op(1150,fx,(dyn)),op(0,fy,(kif_test)),op(1200,fy,(kif_test)),op(1150,fx,(dynamic_multifile)),op(1130, xfy, <=>),op(1110, xfy, =>),op( 500, fy, ~),op( 500, fy, all),op( 500, fy, ex),op( 500,xfy, :),op(1130, xfy, <~>),op(1110, xfy, <=),op(1100, xfy, '|'),op(1100, xfy, '~|'),op(1000, xfy, &),op(1000, xfy, ~&),op( 500, fy, !),op( 500, fy, ?),op( 400, xfx, =),op( 300, xf, !),op( 299, fx, $),op(0,fx,(decl_mpred_prolog)),op(1120,fx,(decl_mpred_prolog)),op(0,fx,(kb_shared)),op(700,xfx,user:('=@@=')),op(600, xfy, ::),op(500,fx,'~'),op(1050,xfx,('==>')),op(1050,xfx,'<==>'),op(1050,xfx,('<-')),op(1100,fx,('==>')),op(1150,xfx,('::::')),op(910,  fy, ~),op(920, xfy, and),op(930, xfy, or),op(400,fy,-),op(500,xfy,&),op(600,xfy,v),op(650,xfy,=>),op(680,xfy,<=>),op(700,fy,skipped),op(1200,xfx,<==),op(600,xfy,':'),op(990,xfx,(':=')),op(250,yfx,('?')),op(1,fx,('$')),op(200,fy,('@')),op(400,yfx,('rdiv')),op(1150,fx,('meta_predicate')),op(400,yfx,('//')),op(500,yfx,('/\\\\')),op(1200,fx,('?-')),op(1150,fx,('module_transparent')),op(1150,fx,('multifile')),op(1150,fx,('public')),op(1150,fx,('thread_initialization')),op(200,fy,('-')),op(500,yfx,('-')),op(700,xfx,('=:=')),op(1150,fx,('thread_local')),op(700,xfx,('as')),op(700,xfx,('=\\\\=')),op(400,yfx,('mod')),op(700,xfx,('=@=')),op(700,xfx,('@>')),op(200,xfy,('^')),op(1200,xfx,('-->')),op(1100,xfy,(';')),op(700,xfx,('>:<')),op(700,xfx,(':<')),op(700,xfx,('@<')),op(700,xfx,('@=<')),op(700,xfx,('@>=')),op(400,yfx,('div')),op(400,yfx,('/')),op(700,xfx,('\\\\=@=')),op(1150,fx,('discontiguous')),op(400,yfx,('rem')),op(700,xfx,('\\\\=')),op(1050,xfy,('->')),op(400,yfx,('>>')),op(200,fy,('\\\\')),op(900,fy,('\\\\+')),op(1105,xfy,('|')),op(700,xfx,('\\\\==')),op(200,xfx,('**')),op(1150,fx,('volatile')),op(500,yfx,('\\\\/')),op(1150,fx,('initialization')),op(400,yfx,('*')),op(1150,fx,('dynamic')),op(700,xfx,('>=')),op(700,xfx,('>')),op(200,fy,('+')),op(500,yfx,('+')),op(1050,xfy,('*->')),op(700,xfx,('=<')),op(700,xfx,('<')),op(700,xfx,('=')),op(700,xfx,('is')),op(600,xfy,(':')),op(400,yfx,('<<')),op(1200,fx,(':-')),op(1200,xfx,(':-')),op(400,yfx,('xor')),op(700,xfx,('==')),op(1185,yfx, ( =@=> )),op(200,fy,user:'--'),op(600,fy,user:'::'),op(600,xfy,user:'::'),op(200,fy,user:'++'),op(600,fy,user:'^^')]), halt. --quiet", :exit-code 1, :out "", :err "Warning: 'swi-pack-extracted/swi-packs/logicmoo_base/logicmoo_base-master/prolog/logicmoo/pdt_server/org.cs3.prolog.library_3.1.2.201603251848/pl/utils4modules_visibility_WORK_IN_PROGRESS.pl':626:0: Illegal UTF-8 continuation\n", :file "swi-pack-extracted/swi-packs/logicmoo_base/logicmoo_base-master/prolog/logicmoo/pdt_server/org.cs3.prolog.library_3.1.2.201603251848/pl/utils4modules_visibility_WORK_IN_PROGRESS.pl", :operators "[op(200, fy,  user:(@)),op(250, yfx, user:(?)),op(990, xfx, user:(:=)),op(1190,xfx,('::::')),op(1180,xfx,('==>')),op(1170,xfx,'<==>'),op(1160,xfx,('<-')),op(1150,xfx,'=>'),op(1140,xfx,'<='),op(1130,xfx,'<=>'),op(600,yfx,'&'),op(600,yfx,'v'),op(350,xfx,'xor'),op(300,fx,'~'),op(300,fx,'-'),op(1199,fx,('==>')),op(1150,fx,(user:kb_shared)),op(1150,xfx,'<=>'),op(400,yfx,'&'),op(500,yfx,'v'),op(1150,fx,(was_dynamic)),op(1150,fx,(was_multifile)),op(1150,fy,(was_module_transparent)),op(1150,fx,(was_export)),op(400, fy, baseKB:(cir) ),op(1075,xfx,user:'<-'),op(400,fy,cir),op(1075,xfx,'=>'),op(1075,xfx,'<-'),op(1075,xfx,'<=>'),op(800,xfx,'=<>='),op(1190,xfx,(:-)),op(1200,fy,(is_entailed_u)),op(1000,fy,(kif_add)),op(1150,fx,'default'),op(1150,fx,'fact'),op(1150,fx,constraint),op(1150,fx,prolog),op(1150,fx,explain),op(1150,fx,predict),op(1150,fx,define),op(1150,fx,th_set),op(1150,fx,th_flag),op(1150,fx,th_reset),op(1150,fy,h),op(1150,fx,thconsult),op(1150,fx,thtrans),op(1150,fx,thcompile),op(1130,xfx,:),op(1120,xfx,==),op(1120,xfx,equiv),op(1110,xfx,<-),op(1110,xfx,=>),op(1100,xfy,or),op(1000,xfy,and),op(1000,xfy,&),op(950,fy,~),op(950,fy,not),op(1150,fx,(dyn)),op(0,fy,(kif_test)),op(1200,fy,(kif_test)),op(1150,fx,(dynamic_multifile)),op(1130, xfy, <=>),op(1110, xfy, =>),op( 500, fy, ~),op( 500, fy, all),op( 500, fy, ex),op( 500,xfy, :),op(1130, xfy, <~>),op(1110, xfy, <=),op(1100, xfy, '|'),op(1100, xfy, '~|'),op(1000, xfy, &),op(1000, xfy, ~&),op( 500, fy, !),op( 500, fy, ?),op( 400, xfx, =),op( 300, xf, !),op( 299, fx, $),op(0,fx,(decl_mpred_prolog)),op(1120,fx,(decl_mpred_prolog)),op(0,fx,(kb_shared)),op(700,xfx,user:('=@@=')),op(600, xfy, ::),op(500,fx,'~'),op(1050,xfx,('==>')),op(1050,xfx,'<==>'),op(1050,xfx,('<-')),op(1100,fx,('==>')),op(1150,xfx,('::::')),op(910,  fy, ~),op(920, xfy, and),op(930, xfy, or),op(400,fy,-),op(500,xfy,&),op(600,xfy,v),op(650,xfy,=>),op(680,xfy,<=>),op(700,fy,skipped),op(1200,xfx,<==),op(600,xfy,':'),op(990,xfx,(':=')),op(250,yfx,('?')),op(1,fx,('$')),op(200,fy,('@')),op(400,yfx,('rdiv')),op(1150,fx,('meta_predicate')),op(400,yfx,('//')),op(500,yfx,('/\\\\')),op(1200,fx,('?-')),op(1150,fx,('module_transparent')),op(1150,fx,('multifile')),op(1150,fx,('public')),op(1150,fx,('thread_initialization')),op(200,fy,('-')),op(500,yfx,('-')),op(700,xfx,('=:=')),op(1150,fx,('thread_local')),op(700,xfx,('as')),op(700,xfx,('=\\\\=')),op(400,yfx,('mod')),op(700,xfx,('=@=')),op(700,xfx,('@>')),op(200,xfy,('^')),op(1200,xfx,('-->')),op(1100,xfy,(';')),op(700,xfx,('>:<')),op(700,xfx,(':<')),op(700,xfx,('@<')),op(700,xfx,('@=<')),op(700,xfx,('@>=')),op(400,yfx,('div')),op(400,yfx,('/')),op(700,xfx,('\\\\=@=')),op(1150,fx,('discontiguous')),op(400,yfx,('rem')),op(700,xfx,('\\\\=')),op(1050,xfy,('->')),op(400,yfx,('>>')),op(200,fy,('\\\\')),op(900,fy,('\\\\+')),op(1105,xfy,('|')),op(700,xfx,('\\\\==')),op(200,xfx,('**')),op(1150,fx,('volatile')),op(500,yfx,('\\\\/')),op(1150,fx,('initialization')),op(400,yfx,('*')),op(1150,fx,('dynamic')),op(700,xfx,('>=')),op(700,xfx,('>')),op(200,fy,('+')),op(500,yfx,('+')),op(1050,xfy,('*->')),op(700,xfx,('=<')),op(700,xfx,('<')),op(700,xfx,('=')),op(700,xfx,('is')),op(600,xfy,(':')),op(400,yfx,('<<')),op(1200,fx,(':-')),op(1200,xfx,(':-')),op(400,yfx,('xor')),op(700,xfx,('==')),op(1185,yfx, ( =@=> )),op(200,fy,user:'--'),op(600,fy,user:'::'),op(600,xfy,user:'::'),op(200,fy,user:'++'),op(600,fy,user:'^^')]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/logicmoo_base/logicmoo_base-master/prolog/logicmoo/pttp/dbase_i_mpred_pttp_unused.pl', [op(200, fy,  user:(@)),op(250, yfx, user:(?)),op(990, xfx, user:(:=)),op(1190,xfx,('::::')),op(1180,xfx,('==>')),op(1170,xfx,'<==>'),op(1160,xfx,('<-')),op(1150,xfx,'=>'),op(1140,xfx,'<='),op(1130,xfx,'<=>'),op(600,yfx,'&'),op(600,yfx,'v'),op(350,xfx,'xor'),op(300,fx,'~'),op(300,fx,'-'),op(1199,fx,('==>')),op(1150,fx,(user:kb_shared)),op(1150,xfx,'<=>'),op(400,yfx,'&'),op(500,yfx,'v'),op(1150,fx,(was_dynamic)),op(1150,fx,(was_multifile)),op(1150,fy,(was_module_transparent)),op(1150,fx,(was_export)),op(400, fy, baseKB:(cir) ),op(1075,xfx,user:'<-'),op(400,fy,cir),op(1075,xfx,'=>'),op(1075,xfx,'<-'),op(1075,xfx,'<=>'),op(800,xfx,'=<>='),op(1190,xfx,(:-)),op(1200,fy,(is_entailed_u)),op(1000,fy,(kif_add)),op(1150,fx,'default'),op(1150,fx,'fact'),op(1150,fx,constraint),op(1150,fx,prolog),op(1150,fx,explain),op(1150,fx,predict),op(1150,fx,define),op(1150,fx,th_set),op(1150,fx,th_flag),op(1150,fx,th_reset),op(1150,fy,h),op(1150,fx,thconsult),op(1150,fx,thtrans),op(1150,fx,thcompile),op(1130,xfx,:),op(1120,xfx,==),op(1120,xfx,equiv),op(1110,xfx,<-),op(1110,xfx,=>),op(1100,xfy,or),op(1000,xfy,and),op(1000,xfy,&),op(950,fy,~),op(950,fy,not),op(1150,fx,(dyn)),op(0,fy,(kif_test)),op(1200,fy,(kif_test)),op(1150,fx,(dynamic_multifile)),op(1130, xfy, <=>),op(1110, xfy, =>),op( 500, fy, ~),op( 500, fy, all),op( 500, fy, ex),op( 500,xfy, :),op(1130, xfy, <~>),op(1110, xfy, <=),op(1100, xfy, '|'),op(1100, xfy, '~|'),op(1000, xfy, &),op(1000, xfy, ~&),op( 500, fy, !),op( 500, fy, ?),op( 400, xfx, =),op( 300, xf, !),op( 299, fx, $),op(0,fx,(decl_mpred_prolog)),op(1120,fx,(decl_mpred_prolog)),op(0,fx,(kb_shared)),op(700,xfx,user:('=@@=')),op(600, xfy, ::),op(500,fx,'~'),op(1050,xfx,('==>')),op(1050,xfx,'<==>'),op(1050,xfx,('<-')),op(1100,fx,('==>')),op(1150,xfx,('::::')),op(910,  fy, ~),op(920, xfy, and),op(930, xfy, or),op(400,fy,-),op(500,xfy,&),op(600,xfy,v),op(650,xfy,=>),op(680,xfy,<=>),op(700,fy,skipped),op(1200,xfx,<==),op(600,xfy,':'),op(990,xfx,(':=')),op(250,yfx,('?')),op(1,fx,('$')),op(200,fy,('@')),op(400,yfx,('rdiv')),op(1150,fx,('meta_predicate')),op(400,yfx,('//')),op(500,yfx,('/\\\\')),op(1200,fx,('?-')),op(1150,fx,('module_transparent')),op(1150,fx,('multifile')),op(1150,fx,('public')),op(1150,fx,('thread_initialization')),op(200,fy,('-')),op(500,yfx,('-')),op(700,xfx,('=:=')),op(1150,fx,('thread_local')),op(700,xfx,('as')),op(700,xfx,('=\\\\=')),op(400,yfx,('mod')),op(700,xfx,('=@=')),op(700,xfx,('@>')),op(200,xfy,('^')),op(1200,xfx,('-->')),op(1100,xfy,(';')),op(700,xfx,('>:<')),op(700,xfx,(':<')),op(700,xfx,('@<')),op(700,xfx,('@=<')),op(700,xfx,('@>=')),op(400,yfx,('div')),op(400,yfx,('/')),op(700,xfx,('\\\\=@=')),op(1150,fx,('discontiguous')),op(400,yfx,('rem')),op(700,xfx,('\\\\=')),op(1050,xfy,('->')),op(400,yfx,('>>')),op(200,fy,('\\\\')),op(900,fy,('\\\\+')),op(1105,xfy,('|')),op(700,xfx,('\\\\==')),op(200,xfx,('**')),op(1150,fx,('volatile')),op(500,yfx,('\\\\/')),op(1150,fx,('initialization')),op(400,yfx,('*')),op(1150,fx,('dynamic')),op(700,xfx,('>=')),op(700,xfx,('>')),op(200,fy,('+')),op(500,yfx,('+')),op(1050,xfy,('*->')),op(700,xfx,('=<')),op(700,xfx,('<')),op(700,xfx,('=')),op(700,xfx,('is')),op(600,xfy,(':')),op(400,yfx,('<<')),op(1200,fx,(':-')),op(1200,xfx,(':-')),op(400,yfx,('xor')),op(700,xfx,('==')),op(1185,yfx, ( =@=> )),op(200,fy,user:'--'),op(600,fy,user:'::'),op(600,xfy,user:'::'),op(200,fy,user:'++'),op(600,fy,user:'^^')]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/logicmoo_base/logicmoo_base-master/prolog/logicmoo/pttp/dbase_i_mpred_pttp_unused.pl", :operators "[op(200, fy,  user:(@)),op(250, yfx, user:(?)),op(990, xfx, user:(:=)),op(1190,xfx,('::::')),op(1180,xfx,('==>')),op(1170,xfx,'<==>'),op(1160,xfx,('<-')),op(1150,xfx,'=>'),op(1140,xfx,'<='),op(1130,xfx,'<=>'),op(600,yfx,'&'),op(600,yfx,'v'),op(350,xfx,'xor'),op(300,fx,'~'),op(300,fx,'-'),op(1199,fx,('==>')),op(1150,fx,(user:kb_shared)),op(1150,xfx,'<=>'),op(400,yfx,'&'),op(500,yfx,'v'),op(1150,fx,(was_dynamic)),op(1150,fx,(was_multifile)),op(1150,fy,(was_module_transparent)),op(1150,fx,(was_export)),op(400, fy, baseKB:(cir) ),op(1075,xfx,user:'<-'),op(400,fy,cir),op(1075,xfx,'=>'),op(1075,xfx,'<-'),op(1075,xfx,'<=>'),op(800,xfx,'=<>='),op(1190,xfx,(:-)),op(1200,fy,(is_entailed_u)),op(1000,fy,(kif_add)),op(1150,fx,'default'),op(1150,fx,'fact'),op(1150,fx,constraint),op(1150,fx,prolog),op(1150,fx,explain),op(1150,fx,predict),op(1150,fx,define),op(1150,fx,th_set),op(1150,fx,th_flag),op(1150,fx,th_reset),op(1150,fy,h),op(1150,fx,thconsult),op(1150,fx,thtrans),op(1150,fx,thcompile),op(1130,xfx,:),op(1120,xfx,==),op(1120,xfx,equiv),op(1110,xfx,<-),op(1110,xfx,=>),op(1100,xfy,or),op(1000,xfy,and),op(1000,xfy,&),op(950,fy,~),op(950,fy,not),op(1150,fx,(dyn)),op(0,fy,(kif_test)),op(1200,fy,(kif_test)),op(1150,fx,(dynamic_multifile)),op(1130, xfy, <=>),op(1110, xfy, =>),op( 500, fy, ~),op( 500, fy, all),op( 500, fy, ex),op( 500,xfy, :),op(1130, xfy, <~>),op(1110, xfy, <=),op(1100, xfy, '|'),op(1100, xfy, '~|'),op(1000, xfy, &),op(1000, xfy, ~&),op( 500, fy, !),op( 500, fy, ?),op( 400, xfx, =),op( 300, xf, !),op( 299, fx, $),op(0,fx,(decl_mpred_prolog)),op(1120,fx,(decl_mpred_prolog)),op(0,fx,(kb_shared)),op(700,xfx,user:('=@@=')),op(600, xfy, ::),op(500,fx,'~'),op(1050,xfx,('==>')),op(1050,xfx,'<==>'),op(1050,xfx,('<-')),op(1100,fx,('==>')),op(1150,xfx,('::::')),op(910,  fy, ~),op(920, xfy, and),op(930, xfy, or),op(400,fy,-),op(500,xfy,&),op(600,xfy,v),op(650,xfy,=>),op(680,xfy,<=>),op(700,fy,skipped),op(1200,xfx,<==),op(600,xfy,':'),op(990,xfx,(':=')),op(250,yfx,('?')),op(1,fx,('$')),op(200,fy,('@')),op(400,yfx,('rdiv')),op(1150,fx,('meta_predicate')),op(400,yfx,('//')),op(500,yfx,('/\\\\')),op(1200,fx,('?-')),op(1150,fx,('module_transparent')),op(1150,fx,('multifile')),op(1150,fx,('public')),op(1150,fx,('thread_initialization')),op(200,fy,('-')),op(500,yfx,('-')),op(700,xfx,('=:=')),op(1150,fx,('thread_local')),op(700,xfx,('as')),op(700,xfx,('=\\\\=')),op(400,yfx,('mod')),op(700,xfx,('=@=')),op(700,xfx,('@>')),op(200,xfy,('^')),op(1200,xfx,('-->')),op(1100,xfy,(';')),op(700,xfx,('>:<')),op(700,xfx,(':<')),op(700,xfx,('@<')),op(700,xfx,('@=<')),op(700,xfx,('@>=')),op(400,yfx,('div')),op(400,yfx,('/')),op(700,xfx,('\\\\=@=')),op(1150,fx,('discontiguous')),op(400,yfx,('rem')),op(700,xfx,('\\\\=')),op(1050,xfy,('->')),op(400,yfx,('>>')),op(200,fy,('\\\\')),op(900,fy,('\\\\+')),op(1105,xfy,('|')),op(700,xfx,('\\\\==')),op(200,xfx,('**')),op(1150,fx,('volatile')),op(500,yfx,('\\\\/')),op(1150,fx,('initialization')),op(400,yfx,('*')),op(1150,fx,('dynamic')),op(700,xfx,('>=')),op(700,xfx,('>')),op(200,fy,('+')),op(500,yfx,('+')),op(1050,xfy,('*->')),op(700,xfx,('=<')),op(700,xfx,('<')),op(700,xfx,('=')),op(700,xfx,('is')),op(600,xfy,(':')),op(400,yfx,('<<')),op(1200,fx,(':-')),op(1200,xfx,(':-')),op(400,yfx,('xor')),op(700,xfx,('==')),op(1185,yfx, ( =@=> )),op(200,fy,user:'--'),op(600,fy,user:'::'),op(600,xfy,user:'::'),op(200,fy,user:'++'),op(600,fy,user:'^^')]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/biomake/biomake-0.1.5/t/target/prolog/Makespec.pro', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/biomake/biomake-0.1.5/t/target/prolog/Makespec.pro", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/biomake/biomake-0.1.5/t/ref/prolog/Makespec.pro', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/biomake/biomake-0.1.5/t/ref/prolog/Makespec.pro", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/biomake/biomake-0.1.5/examples/ontology_alignment.pro', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/biomake/biomake-0.1.5/examples/ontology_alignment.pro", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/open_dicts/open_dicts-master/t/test_unification_grammar.pl', [op(200, yf, '+')]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/open_dicts/open_dicts-master/t/test_unification_grammar.pl", :operators "[op(200, yf, '+')]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/open_dicts/open_dicts-master/prolog/open_dicts.pl', [op(200, yf, '+')]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/open_dicts/open_dicts-master/prolog/open_dicts.pl", :operators "[op(200, yf, '+')]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/open_dicts/open_dicts-master/t/test_open_dicts.pl', [op(200, yf, '+')]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/open_dicts/open_dicts-master/t/test_open_dicts.pl", :operators "[op(200, yf, '+')]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/call_cleaup_each/each_call_cleanup-master/t/sanity_tests.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/call_cleaup_each/each_call_cleanup-master/t/sanity_tests.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/http2_client/http2_client-1.0.0/prolog/hpack.pl', [op(900, fy, [$]),op(0, fx, table)]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/http2_client/http2_client-1.0.0/prolog/hpack.pl", :operators "[op(900, fy, [$]),op(0, fx, table)]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/turing/prolog/turing.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/turing/prolog/turing.pl", :operators "[]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/phil/phil-1.0.0/prolog/phil_test/test.pl', [op(500,fx,#),op(500,fx,'-#')]), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/phil/phil-1.0.0/prolog/phil_test/test.pl", :operators "[op(500,fx,#),op(500,fx,'-#')]"}
{:call "/usr/bin/swipl -l run.pl -g main('swi-pack-extracted/swi-packs/each_call_cleanup/each_call_cleanup-master/t/sanity_tests.pl', []), halt. --quiet", :exit-code 1, :out "", :err "", :file "swi-pack-extracted/swi-packs/each_call_cleanup/each_call_cleanup-master/t/sanity_tests.pl", :operators "[]"}
